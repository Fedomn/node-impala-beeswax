//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var fb303_ttypes = require('./fb303_types');


var ttypes = module.exports = {};
ttypes.HiveObjectType = {
  'GLOBAL' : 1,
  'DATABASE' : 2,
  'TABLE' : 3,
  'PARTITION' : 4,
  'COLUMN' : 5
};
ttypes.PrincipalType = {
  'USER' : 1,
  'ROLE' : 2,
  'GROUP' : 3
};
ttypes.PartitionEventType = {
  'LOAD_DONE' : 1
};
var Version = module.exports.Version = function(args) {
  this.version = null;
  this.comments = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.comments !== undefined && args.comments !== null) {
      this.comments = args.comments;
    }
  }
};
Version.prototype = {};
Version.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Version.prototype.write = function(output) {
  output.writeStructBegin('Version');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 2);
    output.writeString(this.comments);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FieldSchema = module.exports.FieldSchema = function(args) {
  this.name = null;
  this.type = null;
  this.comment = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
FieldSchema.prototype = {};
FieldSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FieldSchema.prototype.write = function(output) {
  output.writeStructBegin('FieldSchema');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Type = module.exports.Type = function(args) {
  this.name = null;
  this.type1 = null;
  this.type2 = null;
  this.fields = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type1 !== undefined && args.type1 !== null) {
      this.type1 = args.type1;
    }
    if (args.type2 !== undefined && args.type2 !== null) {
      this.type2 = args.type2;
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [ttypes.FieldSchema]);
    }
  }
};
Type.prototype = {};
Type.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.fields = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.FieldSchema();
          elem6.read(input);
          this.fields.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Type.prototype.write = function(output) {
  output.writeStructBegin('Type');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type1 !== null && this.type1 !== undefined) {
    output.writeFieldBegin('type1', Thrift.Type.STRING, 2);
    output.writeString(this.type1);
    output.writeFieldEnd();
  }
  if (this.type2 !== null && this.type2 !== undefined) {
    output.writeFieldBegin('type2', Thrift.Type.STRING, 3);
    output.writeString(this.type2);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.fields.length);
    for (var iter7 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter7))
      {
        iter7 = this.fields[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HiveObjectRef = module.exports.HiveObjectRef = function(args) {
  this.objectType = null;
  this.dbName = null;
  this.objectName = null;
  this.partValues = null;
  this.columnName = null;
  if (args) {
    if (args.objectType !== undefined && args.objectType !== null) {
      this.objectType = args.objectType;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.objectName !== undefined && args.objectName !== null) {
      this.objectName = args.objectName;
    }
    if (args.partValues !== undefined && args.partValues !== null) {
      this.partValues = Thrift.copyList(args.partValues, [null]);
    }
    if (args.columnName !== undefined && args.columnName !== null) {
      this.columnName = args.columnName;
    }
  }
};
HiveObjectRef.prototype = {};
HiveObjectRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.objectType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.objectName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.partValues = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.partValues.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HiveObjectRef.prototype.write = function(output) {
  output.writeStructBegin('HiveObjectRef');
  if (this.objectType !== null && this.objectType !== undefined) {
    output.writeFieldBegin('objectType', Thrift.Type.I32, 1);
    output.writeI32(this.objectType);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.objectName !== null && this.objectName !== undefined) {
    output.writeFieldBegin('objectName', Thrift.Type.STRING, 3);
    output.writeString(this.objectName);
    output.writeFieldEnd();
  }
  if (this.partValues !== null && this.partValues !== undefined) {
    output.writeFieldBegin('partValues', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.partValues.length);
    for (var iter15 in this.partValues)
    {
      if (this.partValues.hasOwnProperty(iter15))
      {
        iter15 = this.partValues[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 5);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrivilegeGrantInfo = module.exports.PrivilegeGrantInfo = function(args) {
  this.privilege = null;
  this.createTime = null;
  this.grantor = null;
  this.grantorType = null;
  this.grantOption = null;
  if (args) {
    if (args.privilege !== undefined && args.privilege !== null) {
      this.privilege = args.privilege;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.grantor !== undefined && args.grantor !== null) {
      this.grantor = args.grantor;
    }
    if (args.grantorType !== undefined && args.grantorType !== null) {
      this.grantorType = args.grantorType;
    }
    if (args.grantOption !== undefined && args.grantOption !== null) {
      this.grantOption = args.grantOption;
    }
  }
};
PrivilegeGrantInfo.prototype = {};
PrivilegeGrantInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.privilege = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.grantOption = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrivilegeGrantInfo.prototype.write = function(output) {
  output.writeStructBegin('PrivilegeGrantInfo');
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.STRING, 1);
    output.writeString(this.privilege);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.grantor !== null && this.grantor !== undefined) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 3);
    output.writeString(this.grantor);
    output.writeFieldEnd();
  }
  if (this.grantorType !== null && this.grantorType !== undefined) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 4);
    output.writeI32(this.grantorType);
    output.writeFieldEnd();
  }
  if (this.grantOption !== null && this.grantOption !== undefined) {
    output.writeFieldBegin('grantOption', Thrift.Type.BOOL, 5);
    output.writeBool(this.grantOption);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HiveObjectPrivilege = module.exports.HiveObjectPrivilege = function(args) {
  this.hiveObject = null;
  this.principalName = null;
  this.principalType = null;
  this.grantInfo = null;
  if (args) {
    if (args.hiveObject !== undefined && args.hiveObject !== null) {
      this.hiveObject = new ttypes.HiveObjectRef(args.hiveObject);
    }
    if (args.principalName !== undefined && args.principalName !== null) {
      this.principalName = args.principalName;
    }
    if (args.principalType !== undefined && args.principalType !== null) {
      this.principalType = args.principalType;
    }
    if (args.grantInfo !== undefined && args.grantInfo !== null) {
      this.grantInfo = new ttypes.PrivilegeGrantInfo(args.grantInfo);
    }
  }
};
HiveObjectPrivilege.prototype = {};
HiveObjectPrivilege.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef();
        this.hiveObject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principalType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.grantInfo = new ttypes.PrivilegeGrantInfo();
        this.grantInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HiveObjectPrivilege.prototype.write = function(output) {
  output.writeStructBegin('HiveObjectPrivilege');
  if (this.hiveObject !== null && this.hiveObject !== undefined) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 1);
    this.hiveObject.write(output);
    output.writeFieldEnd();
  }
  if (this.principalName !== null && this.principalName !== undefined) {
    output.writeFieldBegin('principalName', Thrift.Type.STRING, 2);
    output.writeString(this.principalName);
    output.writeFieldEnd();
  }
  if (this.principalType !== null && this.principalType !== undefined) {
    output.writeFieldBegin('principalType', Thrift.Type.I32, 3);
    output.writeI32(this.principalType);
    output.writeFieldEnd();
  }
  if (this.grantInfo !== null && this.grantInfo !== undefined) {
    output.writeFieldBegin('grantInfo', Thrift.Type.STRUCT, 4);
    this.grantInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrivilegeBag = module.exports.PrivilegeBag = function(args) {
  this.privileges = null;
  if (args) {
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = Thrift.copyList(args.privileges, [ttypes.HiveObjectPrivilege]);
    }
  }
};
PrivilegeBag.prototype = {};
PrivilegeBag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.privileges = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.HiveObjectPrivilege();
          elem22.read(input);
          this.privileges.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrivilegeBag.prototype.write = function(output) {
  output.writeStructBegin('PrivilegeBag');
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.privileges.length);
    for (var iter23 in this.privileges)
    {
      if (this.privileges.hasOwnProperty(iter23))
      {
        iter23 = this.privileges[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrincipalPrivilegeSet = module.exports.PrincipalPrivilegeSet = function(args) {
  this.userPrivileges = null;
  this.groupPrivileges = null;
  this.rolePrivileges = null;
  if (args) {
    if (args.userPrivileges !== undefined && args.userPrivileges !== null) {
      this.userPrivileges = Thrift.copyMap(args.userPrivileges, [Thrift.copyList, ttypes.PrivilegeGrantInfo]);
    }
    if (args.groupPrivileges !== undefined && args.groupPrivileges !== null) {
      this.groupPrivileges = Thrift.copyMap(args.groupPrivileges, [Thrift.copyList, ttypes.PrivilegeGrantInfo]);
    }
    if (args.rolePrivileges !== undefined && args.rolePrivileges !== null) {
      this.rolePrivileges = Thrift.copyMap(args.rolePrivileges, [Thrift.copyList, ttypes.PrivilegeGrantInfo]);
    }
  }
};
PrincipalPrivilegeSet.prototype = {};
PrincipalPrivilegeSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.userPrivileges = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var key30 = null;
          var val31 = null;
          key30 = input.readString();
          var _size32 = 0;
          var _rtmp336;
          val31 = [];
          var _etype35 = 0;
          _rtmp336 = input.readListBegin();
          _etype35 = _rtmp336.etype;
          _size32 = _rtmp336.size;
          for (var _i37 = 0; _i37 < _size32; ++_i37)
          {
            var elem38 = null;
            elem38 = new ttypes.PrivilegeGrantInfo();
            elem38.read(input);
            val31.push(elem38);
          }
          input.readListEnd();
          this.userPrivileges[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size39 = 0;
        var _rtmp343;
        this.groupPrivileges = {};
        var _ktype40 = 0;
        var _vtype41 = 0;
        _rtmp343 = input.readMapBegin();
        _ktype40 = _rtmp343.ktype;
        _vtype41 = _rtmp343.vtype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var key45 = null;
          var val46 = null;
          key45 = input.readString();
          var _size47 = 0;
          var _rtmp351;
          val46 = [];
          var _etype50 = 0;
          _rtmp351 = input.readListBegin();
          _etype50 = _rtmp351.etype;
          _size47 = _rtmp351.size;
          for (var _i52 = 0; _i52 < _size47; ++_i52)
          {
            var elem53 = null;
            elem53 = new ttypes.PrivilegeGrantInfo();
            elem53.read(input);
            val46.push(elem53);
          }
          input.readListEnd();
          this.groupPrivileges[key45] = val46;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size54 = 0;
        var _rtmp358;
        this.rolePrivileges = {};
        var _ktype55 = 0;
        var _vtype56 = 0;
        _rtmp358 = input.readMapBegin();
        _ktype55 = _rtmp358.ktype;
        _vtype56 = _rtmp358.vtype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var key60 = null;
          var val61 = null;
          key60 = input.readString();
          var _size62 = 0;
          var _rtmp366;
          val61 = [];
          var _etype65 = 0;
          _rtmp366 = input.readListBegin();
          _etype65 = _rtmp366.etype;
          _size62 = _rtmp366.size;
          for (var _i67 = 0; _i67 < _size62; ++_i67)
          {
            var elem68 = null;
            elem68 = new ttypes.PrivilegeGrantInfo();
            elem68.read(input);
            val61.push(elem68);
          }
          input.readListEnd();
          this.rolePrivileges[key60] = val61;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrincipalPrivilegeSet.prototype.write = function(output) {
  output.writeStructBegin('PrincipalPrivilegeSet');
  if (this.userPrivileges !== null && this.userPrivileges !== undefined) {
    output.writeFieldBegin('userPrivileges', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.userPrivileges));
    for (var kiter69 in this.userPrivileges)
    {
      if (this.userPrivileges.hasOwnProperty(kiter69))
      {
        var viter70 = this.userPrivileges[kiter69];
        output.writeString(kiter69);
        output.writeListBegin(Thrift.Type.STRUCT, viter70.length);
        for (var iter71 in viter70)
        {
          if (viter70.hasOwnProperty(iter71))
          {
            iter71 = viter70[iter71];
            iter71.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.groupPrivileges !== null && this.groupPrivileges !== undefined) {
    output.writeFieldBegin('groupPrivileges', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.groupPrivileges));
    for (var kiter72 in this.groupPrivileges)
    {
      if (this.groupPrivileges.hasOwnProperty(kiter72))
      {
        var viter73 = this.groupPrivileges[kiter72];
        output.writeString(kiter72);
        output.writeListBegin(Thrift.Type.STRUCT, viter73.length);
        for (var iter74 in viter73)
        {
          if (viter73.hasOwnProperty(iter74))
          {
            iter74 = viter73[iter74];
            iter74.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.rolePrivileges !== null && this.rolePrivileges !== undefined) {
    output.writeFieldBegin('rolePrivileges', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.rolePrivileges));
    for (var kiter75 in this.rolePrivileges)
    {
      if (this.rolePrivileges.hasOwnProperty(kiter75))
      {
        var viter76 = this.rolePrivileges[kiter75];
        output.writeString(kiter75);
        output.writeListBegin(Thrift.Type.STRUCT, viter76.length);
        for (var iter77 in viter76)
        {
          if (viter76.hasOwnProperty(iter77))
          {
            iter77 = viter76[iter77];
            iter77.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Role = module.exports.Role = function(args) {
  this.roleName = null;
  this.createTime = null;
  this.ownerName = null;
  if (args) {
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.ownerName !== undefined && args.ownerName !== null) {
      this.ownerName = args.ownerName;
    }
  }
};
Role.prototype = {};
Role.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ownerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Role.prototype.write = function(output) {
  output.writeStructBegin('Role');
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 1);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.ownerName !== null && this.ownerName !== undefined) {
    output.writeFieldBegin('ownerName', Thrift.Type.STRING, 3);
    output.writeString(this.ownerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Database = module.exports.Database = function(args) {
  this.name = null;
  this.description = null;
  this.locationUri = null;
  this.parameters = null;
  this.privileges = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.locationUri !== undefined && args.locationUri !== null) {
      this.locationUri = args.locationUri;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrincipalPrivilegeSet(args.privileges);
    }
  }
};
Database.prototype = {};
Database.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locationUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size78 = 0;
        var _rtmp382;
        this.parameters = {};
        var _ktype79 = 0;
        var _vtype80 = 0;
        _rtmp382 = input.readMapBegin();
        _ktype79 = _rtmp382.ktype;
        _vtype80 = _rtmp382.vtype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var key84 = null;
          var val85 = null;
          key84 = input.readString();
          val85 = input.readString();
          this.parameters[key84] = val85;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Database.prototype.write = function(output) {
  output.writeStructBegin('Database');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.locationUri !== null && this.locationUri !== undefined) {
    output.writeFieldBegin('locationUri', Thrift.Type.STRING, 3);
    output.writeString(this.locationUri);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter86 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter86))
      {
        var viter87 = this.parameters[kiter86];
        output.writeString(kiter86);
        output.writeString(viter87);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 5);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SerDeInfo = module.exports.SerDeInfo = function(args) {
  this.name = null;
  this.serializationLib = null;
  this.parameters = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.serializationLib !== undefined && args.serializationLib !== null) {
      this.serializationLib = args.serializationLib;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
  }
};
SerDeInfo.prototype = {};
SerDeInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serializationLib = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size88 = 0;
        var _rtmp392;
        this.parameters = {};
        var _ktype89 = 0;
        var _vtype90 = 0;
        _rtmp392 = input.readMapBegin();
        _ktype89 = _rtmp392.ktype;
        _vtype90 = _rtmp392.vtype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var key94 = null;
          var val95 = null;
          key94 = input.readString();
          val95 = input.readString();
          this.parameters[key94] = val95;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SerDeInfo.prototype.write = function(output) {
  output.writeStructBegin('SerDeInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.serializationLib !== null && this.serializationLib !== undefined) {
    output.writeFieldBegin('serializationLib', Thrift.Type.STRING, 2);
    output.writeString(this.serializationLib);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter96 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter96))
      {
        var viter97 = this.parameters[kiter96];
        output.writeString(kiter96);
        output.writeString(viter97);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Order = module.exports.Order = function(args) {
  this.col = null;
  this.order = null;
  if (args) {
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
  }
};
Order.prototype = {};
Order.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.col = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Order.prototype.write = function(output) {
  output.writeStructBegin('Order');
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.STRING, 1);
    output.writeString(this.col);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SkewedInfo = module.exports.SkewedInfo = function(args) {
  this.skewedColNames = null;
  this.skewedColValues = null;
  this.skewedColValueLocationMaps = null;
  if (args) {
    if (args.skewedColNames !== undefined && args.skewedColNames !== null) {
      this.skewedColNames = Thrift.copyList(args.skewedColNames, [null]);
    }
    if (args.skewedColValues !== undefined && args.skewedColValues !== null) {
      this.skewedColValues = Thrift.copyList(args.skewedColValues, [Thrift.copyList, null]);
    }
    if (args.skewedColValueLocationMaps !== undefined && args.skewedColValueLocationMaps !== null) {
      this.skewedColValueLocationMaps = Thrift.copyMap(args.skewedColValueLocationMaps, [null]);
    }
  }
};
SkewedInfo.prototype = {};
SkewedInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.skewedColNames = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = input.readString();
          this.skewedColNames.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size105 = 0;
        var _rtmp3109;
        this.skewedColValues = [];
        var _etype108 = 0;
        _rtmp3109 = input.readListBegin();
        _etype108 = _rtmp3109.etype;
        _size105 = _rtmp3109.size;
        for (var _i110 = 0; _i110 < _size105; ++_i110)
        {
          var elem111 = null;
          var _size112 = 0;
          var _rtmp3116;
          elem111 = [];
          var _etype115 = 0;
          _rtmp3116 = input.readListBegin();
          _etype115 = _rtmp3116.etype;
          _size112 = _rtmp3116.size;
          for (var _i117 = 0; _i117 < _size112; ++_i117)
          {
            var elem118 = null;
            elem118 = input.readString();
            elem111.push(elem118);
          }
          input.readListEnd();
          this.skewedColValues.push(elem111);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size119 = 0;
        var _rtmp3123;
        this.skewedColValueLocationMaps = {};
        var _ktype120 = 0;
        var _vtype121 = 0;
        _rtmp3123 = input.readMapBegin();
        _ktype120 = _rtmp3123.ktype;
        _vtype121 = _rtmp3123.vtype;
        _size119 = _rtmp3123.size;
        for (var _i124 = 0; _i124 < _size119; ++_i124)
        {
          var key125 = null;
          var val126 = null;
          var _size127 = 0;
          var _rtmp3131;
          key125 = [];
          var _etype130 = 0;
          _rtmp3131 = input.readListBegin();
          _etype130 = _rtmp3131.etype;
          _size127 = _rtmp3131.size;
          for (var _i132 = 0; _i132 < _size127; ++_i132)
          {
            var elem133 = null;
            elem133 = input.readString();
            key125.push(elem133);
          }
          input.readListEnd();
          val126 = input.readString();
          this.skewedColValueLocationMaps[key125] = val126;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SkewedInfo.prototype.write = function(output) {
  output.writeStructBegin('SkewedInfo');
  if (this.skewedColNames !== null && this.skewedColNames !== undefined) {
    output.writeFieldBegin('skewedColNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.skewedColNames.length);
    for (var iter134 in this.skewedColNames)
    {
      if (this.skewedColNames.hasOwnProperty(iter134))
      {
        iter134 = this.skewedColNames[iter134];
        output.writeString(iter134);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.skewedColValues !== null && this.skewedColValues !== undefined) {
    output.writeFieldBegin('skewedColValues', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.skewedColValues.length);
    for (var iter135 in this.skewedColValues)
    {
      if (this.skewedColValues.hasOwnProperty(iter135))
      {
        iter135 = this.skewedColValues[iter135];
        output.writeListBegin(Thrift.Type.STRING, iter135.length);
        for (var iter136 in iter135)
        {
          if (iter135.hasOwnProperty(iter136))
          {
            iter136 = iter135[iter136];
            output.writeString(iter136);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.skewedColValueLocationMaps !== null && this.skewedColValueLocationMaps !== undefined) {
    output.writeFieldBegin('skewedColValueLocationMaps', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.LIST, Thrift.Type.STRING, Thrift.objectLength(this.skewedColValueLocationMaps));
    for (var kiter137 in this.skewedColValueLocationMaps)
    {
      if (this.skewedColValueLocationMaps.hasOwnProperty(kiter137))
      {
        var viter138 = this.skewedColValueLocationMaps[kiter137];
        output.writeListBegin(Thrift.Type.STRING, kiter137.length);
        for (var iter139 in kiter137)
        {
          if (kiter137.hasOwnProperty(iter139))
          {
            iter139 = kiter137[iter139];
            output.writeString(iter139);
          }
        }
        output.writeListEnd();
        output.writeString(viter138);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StorageDescriptor = module.exports.StorageDescriptor = function(args) {
  this.cols = null;
  this.location = null;
  this.inputFormat = null;
  this.outputFormat = null;
  this.compressed = null;
  this.numBuckets = null;
  this.serdeInfo = null;
  this.bucketCols = null;
  this.sortCols = null;
  this.parameters = null;
  this.skewedInfo = null;
  this.storedAsSubDirectories = null;
  if (args) {
    if (args.cols !== undefined && args.cols !== null) {
      this.cols = Thrift.copyList(args.cols, [ttypes.FieldSchema]);
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.inputFormat !== undefined && args.inputFormat !== null) {
      this.inputFormat = args.inputFormat;
    }
    if (args.outputFormat !== undefined && args.outputFormat !== null) {
      this.outputFormat = args.outputFormat;
    }
    if (args.compressed !== undefined && args.compressed !== null) {
      this.compressed = args.compressed;
    }
    if (args.numBuckets !== undefined && args.numBuckets !== null) {
      this.numBuckets = args.numBuckets;
    }
    if (args.serdeInfo !== undefined && args.serdeInfo !== null) {
      this.serdeInfo = new ttypes.SerDeInfo(args.serdeInfo);
    }
    if (args.bucketCols !== undefined && args.bucketCols !== null) {
      this.bucketCols = Thrift.copyList(args.bucketCols, [null]);
    }
    if (args.sortCols !== undefined && args.sortCols !== null) {
      this.sortCols = Thrift.copyList(args.sortCols, [ttypes.Order]);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.skewedInfo !== undefined && args.skewedInfo !== null) {
      this.skewedInfo = new ttypes.SkewedInfo(args.skewedInfo);
    }
    if (args.storedAsSubDirectories !== undefined && args.storedAsSubDirectories !== null) {
      this.storedAsSubDirectories = args.storedAsSubDirectories;
    }
  }
};
StorageDescriptor.prototype = {};
StorageDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.cols = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = new ttypes.FieldSchema();
          elem146.read(input);
          this.cols.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.inputFormat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.outputFormat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.compressed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.numBuckets = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.serdeInfo = new ttypes.SerDeInfo();
        this.serdeInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size147 = 0;
        var _rtmp3151;
        this.bucketCols = [];
        var _etype150 = 0;
        _rtmp3151 = input.readListBegin();
        _etype150 = _rtmp3151.etype;
        _size147 = _rtmp3151.size;
        for (var _i152 = 0; _i152 < _size147; ++_i152)
        {
          var elem153 = null;
          elem153 = input.readString();
          this.bucketCols.push(elem153);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size154 = 0;
        var _rtmp3158;
        this.sortCols = [];
        var _etype157 = 0;
        _rtmp3158 = input.readListBegin();
        _etype157 = _rtmp3158.etype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var elem160 = null;
          elem160 = new ttypes.Order();
          elem160.read(input);
          this.sortCols.push(elem160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size161 = 0;
        var _rtmp3165;
        this.parameters = {};
        var _ktype162 = 0;
        var _vtype163 = 0;
        _rtmp3165 = input.readMapBegin();
        _ktype162 = _rtmp3165.ktype;
        _vtype163 = _rtmp3165.vtype;
        _size161 = _rtmp3165.size;
        for (var _i166 = 0; _i166 < _size161; ++_i166)
        {
          var key167 = null;
          var val168 = null;
          key167 = input.readString();
          val168 = input.readString();
          this.parameters[key167] = val168;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.skewedInfo = new ttypes.SkewedInfo();
        this.skewedInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.storedAsSubDirectories = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StorageDescriptor.prototype.write = function(output) {
  output.writeStructBegin('StorageDescriptor');
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
    for (var iter169 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter169))
      {
        iter169 = this.cols[iter169];
        iter169.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.inputFormat !== null && this.inputFormat !== undefined) {
    output.writeFieldBegin('inputFormat', Thrift.Type.STRING, 3);
    output.writeString(this.inputFormat);
    output.writeFieldEnd();
  }
  if (this.outputFormat !== null && this.outputFormat !== undefined) {
    output.writeFieldBegin('outputFormat', Thrift.Type.STRING, 4);
    output.writeString(this.outputFormat);
    output.writeFieldEnd();
  }
  if (this.compressed !== null && this.compressed !== undefined) {
    output.writeFieldBegin('compressed', Thrift.Type.BOOL, 5);
    output.writeBool(this.compressed);
    output.writeFieldEnd();
  }
  if (this.numBuckets !== null && this.numBuckets !== undefined) {
    output.writeFieldBegin('numBuckets', Thrift.Type.I32, 6);
    output.writeI32(this.numBuckets);
    output.writeFieldEnd();
  }
  if (this.serdeInfo !== null && this.serdeInfo !== undefined) {
    output.writeFieldBegin('serdeInfo', Thrift.Type.STRUCT, 7);
    this.serdeInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.bucketCols !== null && this.bucketCols !== undefined) {
    output.writeFieldBegin('bucketCols', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.bucketCols.length);
    for (var iter170 in this.bucketCols)
    {
      if (this.bucketCols.hasOwnProperty(iter170))
      {
        iter170 = this.bucketCols[iter170];
        output.writeString(iter170);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sortCols !== null && this.sortCols !== undefined) {
    output.writeFieldBegin('sortCols', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.sortCols.length);
    for (var iter171 in this.sortCols)
    {
      if (this.sortCols.hasOwnProperty(iter171))
      {
        iter171 = this.sortCols[iter171];
        iter171.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter172 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter172))
      {
        var viter173 = this.parameters[kiter172];
        output.writeString(kiter172);
        output.writeString(viter173);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.skewedInfo !== null && this.skewedInfo !== undefined) {
    output.writeFieldBegin('skewedInfo', Thrift.Type.STRUCT, 11);
    this.skewedInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.storedAsSubDirectories !== null && this.storedAsSubDirectories !== undefined) {
    output.writeFieldBegin('storedAsSubDirectories', Thrift.Type.BOOL, 12);
    output.writeBool(this.storedAsSubDirectories);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Table = module.exports.Table = function(args) {
  this.tableName = null;
  this.dbName = null;
  this.owner = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.retention = null;
  this.sd = null;
  this.partitionKeys = null;
  this.parameters = null;
  this.viewOriginalText = null;
  this.viewExpandedText = null;
  this.tableType = null;
  this.privileges = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.owner !== undefined && args.owner !== null) {
      this.owner = args.owner;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined && args.lastAccessTime !== null) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.retention !== undefined && args.retention !== null) {
      this.retention = args.retention;
    }
    if (args.sd !== undefined && args.sd !== null) {
      this.sd = new ttypes.StorageDescriptor(args.sd);
    }
    if (args.partitionKeys !== undefined && args.partitionKeys !== null) {
      this.partitionKeys = Thrift.copyList(args.partitionKeys, [ttypes.FieldSchema]);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.viewOriginalText !== undefined && args.viewOriginalText !== null) {
      this.viewOriginalText = args.viewOriginalText;
    }
    if (args.viewExpandedText !== undefined && args.viewExpandedText !== null) {
      this.viewExpandedText = args.viewExpandedText;
    }
    if (args.tableType !== undefined && args.tableType !== null) {
      this.tableType = args.tableType;
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrincipalPrivilegeSet(args.privileges);
    }
  }
};
Table.prototype = {};
Table.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.retention = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size174 = 0;
        var _rtmp3178;
        this.partitionKeys = [];
        var _etype177 = 0;
        _rtmp3178 = input.readListBegin();
        _etype177 = _rtmp3178.etype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          var elem180 = null;
          elem180 = new ttypes.FieldSchema();
          elem180.read(input);
          this.partitionKeys.push(elem180);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size181 = 0;
        var _rtmp3185;
        this.parameters = {};
        var _ktype182 = 0;
        var _vtype183 = 0;
        _rtmp3185 = input.readMapBegin();
        _ktype182 = _rtmp3185.ktype;
        _vtype183 = _rtmp3185.vtype;
        _size181 = _rtmp3185.size;
        for (var _i186 = 0; _i186 < _size181; ++_i186)
        {
          var key187 = null;
          var val188 = null;
          key187 = input.readString();
          val188 = input.readString();
          this.parameters[key187] = val188;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.viewOriginalText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.viewExpandedText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.tableType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Table.prototype.write = function(output) {
  output.writeStructBegin('Table');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 3);
    output.writeString(this.owner);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.retention !== null && this.retention !== undefined) {
    output.writeFieldBegin('retention', Thrift.Type.I32, 6);
    output.writeI32(this.retention);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 7);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.partitionKeys !== null && this.partitionKeys !== undefined) {
    output.writeFieldBegin('partitionKeys', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitionKeys.length);
    for (var iter189 in this.partitionKeys)
    {
      if (this.partitionKeys.hasOwnProperty(iter189))
      {
        iter189 = this.partitionKeys[iter189];
        iter189.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter190 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter190))
      {
        var viter191 = this.parameters[kiter190];
        output.writeString(kiter190);
        output.writeString(viter191);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.viewOriginalText !== null && this.viewOriginalText !== undefined) {
    output.writeFieldBegin('viewOriginalText', Thrift.Type.STRING, 10);
    output.writeString(this.viewOriginalText);
    output.writeFieldEnd();
  }
  if (this.viewExpandedText !== null && this.viewExpandedText !== undefined) {
    output.writeFieldBegin('viewExpandedText', Thrift.Type.STRING, 11);
    output.writeString(this.viewExpandedText);
    output.writeFieldEnd();
  }
  if (this.tableType !== null && this.tableType !== undefined) {
    output.writeFieldBegin('tableType', Thrift.Type.STRING, 12);
    output.writeString(this.tableType);
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 13);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Partition = module.exports.Partition = function(args) {
  this.values = null;
  this.dbName = null;
  this.tableName = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.sd = null;
  this.parameters = null;
  this.privileges = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined && args.lastAccessTime !== null) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.sd !== undefined && args.sd !== null) {
      this.sd = new ttypes.StorageDescriptor(args.sd);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrincipalPrivilegeSet(args.privileges);
    }
  }
};
Partition.prototype = {};
Partition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.values = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = input.readString();
          this.values.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size199 = 0;
        var _rtmp3203;
        this.parameters = {};
        var _ktype200 = 0;
        var _vtype201 = 0;
        _rtmp3203 = input.readMapBegin();
        _ktype200 = _rtmp3203.ktype;
        _vtype201 = _rtmp3203.vtype;
        _size199 = _rtmp3203.size;
        for (var _i204 = 0; _i204 < _size199; ++_i204)
        {
          var key205 = null;
          var val206 = null;
          key205 = input.readString();
          val206 = input.readString();
          this.parameters[key205] = val206;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Partition.prototype.write = function(output) {
  output.writeStructBegin('Partition');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter207 in this.values)
    {
      if (this.values.hasOwnProperty(iter207))
      {
        iter207 = this.values[iter207];
        output.writeString(iter207);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 6);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter208 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter208))
      {
        var viter209 = this.parameters[kiter208];
        output.writeString(kiter208);
        output.writeString(viter209);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 8);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Index = module.exports.Index = function(args) {
  this.indexName = null;
  this.indexHandlerClass = null;
  this.dbName = null;
  this.origTableName = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.indexTableName = null;
  this.sd = null;
  this.parameters = null;
  this.deferredRebuild = null;
  if (args) {
    if (args.indexName !== undefined && args.indexName !== null) {
      this.indexName = args.indexName;
    }
    if (args.indexHandlerClass !== undefined && args.indexHandlerClass !== null) {
      this.indexHandlerClass = args.indexHandlerClass;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.origTableName !== undefined && args.origTableName !== null) {
      this.origTableName = args.origTableName;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined && args.lastAccessTime !== null) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.indexTableName !== undefined && args.indexTableName !== null) {
      this.indexTableName = args.indexTableName;
    }
    if (args.sd !== undefined && args.sd !== null) {
      this.sd = new ttypes.StorageDescriptor(args.sd);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.deferredRebuild !== undefined && args.deferredRebuild !== null) {
      this.deferredRebuild = args.deferredRebuild;
    }
  }
};
Index.prototype = {};
Index.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.indexHandlerClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.origTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.indexTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size210 = 0;
        var _rtmp3214;
        this.parameters = {};
        var _ktype211 = 0;
        var _vtype212 = 0;
        _rtmp3214 = input.readMapBegin();
        _ktype211 = _rtmp3214.ktype;
        _vtype212 = _rtmp3214.vtype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var key216 = null;
          var val217 = null;
          key216 = input.readString();
          val217 = input.readString();
          this.parameters[key216] = val217;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.deferredRebuild = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Index.prototype.write = function(output) {
  output.writeStructBegin('Index');
  if (this.indexName !== null && this.indexName !== undefined) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 1);
    output.writeString(this.indexName);
    output.writeFieldEnd();
  }
  if (this.indexHandlerClass !== null && this.indexHandlerClass !== undefined) {
    output.writeFieldBegin('indexHandlerClass', Thrift.Type.STRING, 2);
    output.writeString(this.indexHandlerClass);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 3);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.origTableName !== null && this.origTableName !== undefined) {
    output.writeFieldBegin('origTableName', Thrift.Type.STRING, 4);
    output.writeString(this.origTableName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 5);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 6);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.indexTableName !== null && this.indexTableName !== undefined) {
    output.writeFieldBegin('indexTableName', Thrift.Type.STRING, 7);
    output.writeString(this.indexTableName);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 8);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter218 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter218))
      {
        var viter219 = this.parameters[kiter218];
        output.writeString(kiter218);
        output.writeString(viter219);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deferredRebuild !== null && this.deferredRebuild !== undefined) {
    output.writeFieldBegin('deferredRebuild', Thrift.Type.BOOL, 10);
    output.writeBool(this.deferredRebuild);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BooleanColumnStatsData = module.exports.BooleanColumnStatsData = function(args) {
  this.numTrues = null;
  this.numFalses = null;
  this.numNulls = null;
  if (args) {
    if (args.numTrues !== undefined && args.numTrues !== null) {
      this.numTrues = args.numTrues;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numTrues is unset!');
    }
    if (args.numFalses !== undefined && args.numFalses !== null) {
      this.numFalses = args.numFalses;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numFalses is unset!');
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
  }
};
BooleanColumnStatsData.prototype = {};
BooleanColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numTrues = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numFalses = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BooleanColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('BooleanColumnStatsData');
  if (this.numTrues !== null && this.numTrues !== undefined) {
    output.writeFieldBegin('numTrues', Thrift.Type.I64, 1);
    output.writeI64(this.numTrues);
    output.writeFieldEnd();
  }
  if (this.numFalses !== null && this.numFalses !== undefined) {
    output.writeFieldBegin('numFalses', Thrift.Type.I64, 2);
    output.writeI64(this.numFalses);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DoubleColumnStatsData = module.exports.DoubleColumnStatsData = function(args) {
  this.lowValue = null;
  this.highValue = null;
  this.numNulls = null;
  this.numDVs = null;
  if (args) {
    if (args.lowValue !== undefined && args.lowValue !== null) {
      this.lowValue = args.lowValue;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lowValue is unset!');
    }
    if (args.highValue !== undefined && args.highValue !== null) {
      this.highValue = args.highValue;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field highValue is unset!');
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined && args.numDVs !== null) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
  }
};
DoubleColumnStatsData.prototype = {};
DoubleColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lowValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.highValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DoubleColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('DoubleColumnStatsData');
  if (this.lowValue !== null && this.lowValue !== undefined) {
    output.writeFieldBegin('lowValue', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.lowValue);
    output.writeFieldEnd();
  }
  if (this.highValue !== null && this.highValue !== undefined) {
    output.writeFieldBegin('highValue', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.highValue);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LongColumnStatsData = module.exports.LongColumnStatsData = function(args) {
  this.lowValue = null;
  this.highValue = null;
  this.numNulls = null;
  this.numDVs = null;
  if (args) {
    if (args.lowValue !== undefined && args.lowValue !== null) {
      this.lowValue = args.lowValue;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lowValue is unset!');
    }
    if (args.highValue !== undefined && args.highValue !== null) {
      this.highValue = args.highValue;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field highValue is unset!');
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined && args.numDVs !== null) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
  }
};
LongColumnStatsData.prototype = {};
LongColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lowValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.highValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LongColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('LongColumnStatsData');
  if (this.lowValue !== null && this.lowValue !== undefined) {
    output.writeFieldBegin('lowValue', Thrift.Type.I64, 1);
    output.writeI64(this.lowValue);
    output.writeFieldEnd();
  }
  if (this.highValue !== null && this.highValue !== undefined) {
    output.writeFieldBegin('highValue', Thrift.Type.I64, 2);
    output.writeI64(this.highValue);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StringColumnStatsData = module.exports.StringColumnStatsData = function(args) {
  this.maxColLen = null;
  this.avgColLen = null;
  this.numNulls = null;
  this.numDVs = null;
  if (args) {
    if (args.maxColLen !== undefined && args.maxColLen !== null) {
      this.maxColLen = args.maxColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxColLen is unset!');
    }
    if (args.avgColLen !== undefined && args.avgColLen !== null) {
      this.avgColLen = args.avgColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field avgColLen is unset!');
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
    if (args.numDVs !== undefined && args.numDVs !== null) {
      this.numDVs = args.numDVs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numDVs is unset!');
    }
  }
};
StringColumnStatsData.prototype = {};
StringColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.maxColLen = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.avgColLen = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numDVs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StringColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('StringColumnStatsData');
  if (this.maxColLen !== null && this.maxColLen !== undefined) {
    output.writeFieldBegin('maxColLen', Thrift.Type.I64, 1);
    output.writeI64(this.maxColLen);
    output.writeFieldEnd();
  }
  if (this.avgColLen !== null && this.avgColLen !== undefined) {
    output.writeFieldBegin('avgColLen', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.avgColLen);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  if (this.numDVs !== null && this.numDVs !== undefined) {
    output.writeFieldBegin('numDVs', Thrift.Type.I64, 4);
    output.writeI64(this.numDVs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BinaryColumnStatsData = module.exports.BinaryColumnStatsData = function(args) {
  this.maxColLen = null;
  this.avgColLen = null;
  this.numNulls = null;
  if (args) {
    if (args.maxColLen !== undefined && args.maxColLen !== null) {
      this.maxColLen = args.maxColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxColLen is unset!');
    }
    if (args.avgColLen !== undefined && args.avgColLen !== null) {
      this.avgColLen = args.avgColLen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field avgColLen is unset!');
    }
    if (args.numNulls !== undefined && args.numNulls !== null) {
      this.numNulls = args.numNulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numNulls is unset!');
    }
  }
};
BinaryColumnStatsData.prototype = {};
BinaryColumnStatsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.maxColLen = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.avgColLen = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numNulls = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BinaryColumnStatsData.prototype.write = function(output) {
  output.writeStructBegin('BinaryColumnStatsData');
  if (this.maxColLen !== null && this.maxColLen !== undefined) {
    output.writeFieldBegin('maxColLen', Thrift.Type.I64, 1);
    output.writeI64(this.maxColLen);
    output.writeFieldEnd();
  }
  if (this.avgColLen !== null && this.avgColLen !== undefined) {
    output.writeFieldBegin('avgColLen', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.avgColLen);
    output.writeFieldEnd();
  }
  if (this.numNulls !== null && this.numNulls !== undefined) {
    output.writeFieldBegin('numNulls', Thrift.Type.I64, 3);
    output.writeI64(this.numNulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnStatisticsData = module.exports.ColumnStatisticsData = function(args) {
  this.booleanStats = null;
  this.longStats = null;
  this.doubleStats = null;
  this.stringStats = null;
  this.binaryStats = null;
  if (args) {
    if (args.booleanStats !== undefined && args.booleanStats !== null) {
      this.booleanStats = new ttypes.BooleanColumnStatsData(args.booleanStats);
    }
    if (args.longStats !== undefined && args.longStats !== null) {
      this.longStats = new ttypes.LongColumnStatsData(args.longStats);
    }
    if (args.doubleStats !== undefined && args.doubleStats !== null) {
      this.doubleStats = new ttypes.DoubleColumnStatsData(args.doubleStats);
    }
    if (args.stringStats !== undefined && args.stringStats !== null) {
      this.stringStats = new ttypes.StringColumnStatsData(args.stringStats);
    }
    if (args.binaryStats !== undefined && args.binaryStats !== null) {
      this.binaryStats = new ttypes.BinaryColumnStatsData(args.binaryStats);
    }
  }
};
ColumnStatisticsData.prototype = {};
ColumnStatisticsData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.booleanStats = new ttypes.BooleanColumnStatsData();
        this.booleanStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.longStats = new ttypes.LongColumnStatsData();
        this.longStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.doubleStats = new ttypes.DoubleColumnStatsData();
        this.doubleStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.stringStats = new ttypes.StringColumnStatsData();
        this.stringStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.binaryStats = new ttypes.BinaryColumnStatsData();
        this.binaryStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatisticsData.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatisticsData');
  if (this.booleanStats !== null && this.booleanStats !== undefined) {
    output.writeFieldBegin('booleanStats', Thrift.Type.STRUCT, 1);
    this.booleanStats.write(output);
    output.writeFieldEnd();
  }
  if (this.longStats !== null && this.longStats !== undefined) {
    output.writeFieldBegin('longStats', Thrift.Type.STRUCT, 2);
    this.longStats.write(output);
    output.writeFieldEnd();
  }
  if (this.doubleStats !== null && this.doubleStats !== undefined) {
    output.writeFieldBegin('doubleStats', Thrift.Type.STRUCT, 3);
    this.doubleStats.write(output);
    output.writeFieldEnd();
  }
  if (this.stringStats !== null && this.stringStats !== undefined) {
    output.writeFieldBegin('stringStats', Thrift.Type.STRUCT, 4);
    this.stringStats.write(output);
    output.writeFieldEnd();
  }
  if (this.binaryStats !== null && this.binaryStats !== undefined) {
    output.writeFieldBegin('binaryStats', Thrift.Type.STRUCT, 5);
    this.binaryStats.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnStatisticsObj = module.exports.ColumnStatisticsObj = function(args) {
  this.colName = null;
  this.colType = null;
  this.statsData = null;
  if (args) {
    if (args.colName !== undefined && args.colName !== null) {
      this.colName = args.colName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colName is unset!');
    }
    if (args.colType !== undefined && args.colType !== null) {
      this.colType = args.colType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colType is unset!');
    }
    if (args.statsData !== undefined && args.statsData !== null) {
      this.statsData = new ttypes.ColumnStatisticsData(args.statsData);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statsData is unset!');
    }
  }
};
ColumnStatisticsObj.prototype = {};
ColumnStatisticsObj.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.colName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.colType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statsData = new ttypes.ColumnStatisticsData();
        this.statsData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatisticsObj.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatisticsObj');
  if (this.colName !== null && this.colName !== undefined) {
    output.writeFieldBegin('colName', Thrift.Type.STRING, 1);
    output.writeString(this.colName);
    output.writeFieldEnd();
  }
  if (this.colType !== null && this.colType !== undefined) {
    output.writeFieldBegin('colType', Thrift.Type.STRING, 2);
    output.writeString(this.colType);
    output.writeFieldEnd();
  }
  if (this.statsData !== null && this.statsData !== undefined) {
    output.writeFieldBegin('statsData', Thrift.Type.STRUCT, 3);
    this.statsData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnStatisticsDesc = module.exports.ColumnStatisticsDesc = function(args) {
  this.isTblLevel = null;
  this.dbName = null;
  this.tableName = null;
  this.partName = null;
  this.lastAnalyzed = null;
  if (args) {
    if (args.isTblLevel !== undefined && args.isTblLevel !== null) {
      this.isTblLevel = args.isTblLevel;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isTblLevel is unset!');
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dbName is unset!');
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.partName !== undefined && args.partName !== null) {
      this.partName = args.partName;
    }
    if (args.lastAnalyzed !== undefined && args.lastAnalyzed !== null) {
      this.lastAnalyzed = args.lastAnalyzed;
    }
  }
};
ColumnStatisticsDesc.prototype = {};
ColumnStatisticsDesc.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isTblLevel = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.partName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.lastAnalyzed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatisticsDesc.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatisticsDesc');
  if (this.isTblLevel !== null && this.isTblLevel !== undefined) {
    output.writeFieldBegin('isTblLevel', Thrift.Type.BOOL, 1);
    output.writeBool(this.isTblLevel);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.partName !== null && this.partName !== undefined) {
    output.writeFieldBegin('partName', Thrift.Type.STRING, 4);
    output.writeString(this.partName);
    output.writeFieldEnd();
  }
  if (this.lastAnalyzed !== null && this.lastAnalyzed !== undefined) {
    output.writeFieldBegin('lastAnalyzed', Thrift.Type.I64, 5);
    output.writeI64(this.lastAnalyzed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnStatistics = module.exports.ColumnStatistics = function(args) {
  this.statsDesc = null;
  this.statsObj = null;
  if (args) {
    if (args.statsDesc !== undefined && args.statsDesc !== null) {
      this.statsDesc = new ttypes.ColumnStatisticsDesc(args.statsDesc);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statsDesc is unset!');
    }
    if (args.statsObj !== undefined && args.statsObj !== null) {
      this.statsObj = Thrift.copyList(args.statsObj, [ttypes.ColumnStatisticsObj]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statsObj is unset!');
    }
  }
};
ColumnStatistics.prototype = {};
ColumnStatistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.statsDesc = new ttypes.ColumnStatisticsDesc();
        this.statsDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size220 = 0;
        var _rtmp3224;
        this.statsObj = [];
        var _etype223 = 0;
        _rtmp3224 = input.readListBegin();
        _etype223 = _rtmp3224.etype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          var elem226 = null;
          elem226 = new ttypes.ColumnStatisticsObj();
          elem226.read(input);
          this.statsObj.push(elem226);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnStatistics.prototype.write = function(output) {
  output.writeStructBegin('ColumnStatistics');
  if (this.statsDesc !== null && this.statsDesc !== undefined) {
    output.writeFieldBegin('statsDesc', Thrift.Type.STRUCT, 1);
    this.statsDesc.write(output);
    output.writeFieldEnd();
  }
  if (this.statsObj !== null && this.statsObj !== undefined) {
    output.writeFieldBegin('statsObj', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.statsObj.length);
    for (var iter227 in this.statsObj)
    {
      if (this.statsObj.hasOwnProperty(iter227))
      {
        iter227 = this.statsObj[iter227];
        iter227.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Schema = module.exports.Schema = function(args) {
  this.fieldSchemas = null;
  this.properties = null;
  if (args) {
    if (args.fieldSchemas !== undefined && args.fieldSchemas !== null) {
      this.fieldSchemas = Thrift.copyList(args.fieldSchemas, [ttypes.FieldSchema]);
    }
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = Thrift.copyMap(args.properties, [null]);
    }
  }
};
Schema.prototype = {};
Schema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size228 = 0;
        var _rtmp3232;
        this.fieldSchemas = [];
        var _etype231 = 0;
        _rtmp3232 = input.readListBegin();
        _etype231 = _rtmp3232.etype;
        _size228 = _rtmp3232.size;
        for (var _i233 = 0; _i233 < _size228; ++_i233)
        {
          var elem234 = null;
          elem234 = new ttypes.FieldSchema();
          elem234.read(input);
          this.fieldSchemas.push(elem234);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size235 = 0;
        var _rtmp3239;
        this.properties = {};
        var _ktype236 = 0;
        var _vtype237 = 0;
        _rtmp3239 = input.readMapBegin();
        _ktype236 = _rtmp3239.ktype;
        _vtype237 = _rtmp3239.vtype;
        _size235 = _rtmp3239.size;
        for (var _i240 = 0; _i240 < _size235; ++_i240)
        {
          var key241 = null;
          var val242 = null;
          key241 = input.readString();
          val242 = input.readString();
          this.properties[key241] = val242;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Schema.prototype.write = function(output) {
  output.writeStructBegin('Schema');
  if (this.fieldSchemas !== null && this.fieldSchemas !== undefined) {
    output.writeFieldBegin('fieldSchemas', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.fieldSchemas.length);
    for (var iter243 in this.fieldSchemas)
    {
      if (this.fieldSchemas.hasOwnProperty(iter243))
      {
        iter243 = this.fieldSchemas[iter243];
        iter243.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter244 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter244))
      {
        var viter245 = this.properties[kiter244];
        output.writeString(kiter244);
        output.writeString(viter245);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EnvironmentContext = module.exports.EnvironmentContext = function(args) {
  this.properties = null;
  if (args) {
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = Thrift.copyMap(args.properties, [null]);
    }
  }
};
EnvironmentContext.prototype = {};
EnvironmentContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size246 = 0;
        var _rtmp3250;
        this.properties = {};
        var _ktype247 = 0;
        var _vtype248 = 0;
        _rtmp3250 = input.readMapBegin();
        _ktype247 = _rtmp3250.ktype;
        _vtype248 = _rtmp3250.vtype;
        _size246 = _rtmp3250.size;
        for (var _i251 = 0; _i251 < _size246; ++_i251)
        {
          var key252 = null;
          var val253 = null;
          key252 = input.readString();
          val253 = input.readString();
          this.properties[key252] = val253;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnvironmentContext.prototype.write = function(output) {
  output.writeStructBegin('EnvironmentContext');
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter254 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter254))
      {
        var viter255 = this.properties[kiter254];
        output.writeString(kiter254);
        output.writeString(viter255);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetaException = module.exports.MetaException = function(args) {
  Thrift.TException.call(this, "MetaException");
  this.name = "MetaException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(MetaException, Thrift.TException);
MetaException.prototype.name = 'MetaException';
MetaException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaException.prototype.write = function(output) {
  output.writeStructBegin('MetaException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnknownTableException = module.exports.UnknownTableException = function(args) {
  Thrift.TException.call(this, "UnknownTableException");
  this.name = "UnknownTableException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownTableException, Thrift.TException);
UnknownTableException.prototype.name = 'UnknownTableException';
UnknownTableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownTableException.prototype.write = function(output) {
  output.writeStructBegin('UnknownTableException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnknownDBException = module.exports.UnknownDBException = function(args) {
  Thrift.TException.call(this, "UnknownDBException");
  this.name = "UnknownDBException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownDBException, Thrift.TException);
UnknownDBException.prototype.name = 'UnknownDBException';
UnknownDBException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownDBException.prototype.write = function(output) {
  output.writeStructBegin('UnknownDBException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AlreadyExistsException = module.exports.AlreadyExistsException = function(args) {
  Thrift.TException.call(this, "AlreadyExistsException");
  this.name = "AlreadyExistsException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(AlreadyExistsException, Thrift.TException);
AlreadyExistsException.prototype.name = 'AlreadyExistsException';
AlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('AlreadyExistsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidPartitionException = module.exports.InvalidPartitionException = function(args) {
  Thrift.TException.call(this, "InvalidPartitionException");
  this.name = "InvalidPartitionException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidPartitionException, Thrift.TException);
InvalidPartitionException.prototype.name = 'InvalidPartitionException';
InvalidPartitionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPartitionException.prototype.write = function(output) {
  output.writeStructBegin('InvalidPartitionException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnknownPartitionException = module.exports.UnknownPartitionException = function(args) {
  Thrift.TException.call(this, "UnknownPartitionException");
  this.name = "UnknownPartitionException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownPartitionException, Thrift.TException);
UnknownPartitionException.prototype.name = 'UnknownPartitionException';
UnknownPartitionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownPartitionException.prototype.write = function(output) {
  output.writeStructBegin('UnknownPartitionException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidObjectException = module.exports.InvalidObjectException = function(args) {
  Thrift.TException.call(this, "InvalidObjectException");
  this.name = "InvalidObjectException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidObjectException, Thrift.TException);
InvalidObjectException.prototype.name = 'InvalidObjectException';
InvalidObjectException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidObjectException.prototype.write = function(output) {
  output.writeStructBegin('InvalidObjectException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoSuchObjectException = module.exports.NoSuchObjectException = function(args) {
  Thrift.TException.call(this, "NoSuchObjectException");
  this.name = "NoSuchObjectException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchObjectException, Thrift.TException);
NoSuchObjectException.prototype.name = 'NoSuchObjectException';
NoSuchObjectException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchObjectException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchObjectException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IndexAlreadyExistsException = module.exports.IndexAlreadyExistsException = function(args) {
  Thrift.TException.call(this, "IndexAlreadyExistsException");
  this.name = "IndexAlreadyExistsException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(IndexAlreadyExistsException, Thrift.TException);
IndexAlreadyExistsException.prototype.name = 'IndexAlreadyExistsException';
IndexAlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexAlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('IndexAlreadyExistsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidOperationException = module.exports.InvalidOperationException = function(args) {
  Thrift.TException.call(this, "InvalidOperationException");
  this.name = "InvalidOperationException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidOperationException, Thrift.TException);
InvalidOperationException.prototype.name = 'InvalidOperationException';
InvalidOperationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOperationException.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperationException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ConfigValSecurityException = module.exports.ConfigValSecurityException = function(args) {
  Thrift.TException.call(this, "ConfigValSecurityException");
  this.name = "ConfigValSecurityException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ConfigValSecurityException, Thrift.TException);
ConfigValSecurityException.prototype.name = 'ConfigValSecurityException';
ConfigValSecurityException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigValSecurityException.prototype.write = function(output) {
  output.writeStructBegin('ConfigValSecurityException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidInputException = module.exports.InvalidInputException = function(args) {
  Thrift.TException.call(this, "InvalidInputException");
  this.name = "InvalidInputException";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidInputException, Thrift.TException);
InvalidInputException.prototype.name = 'InvalidInputException';
InvalidInputException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidInputException.prototype.write = function(output) {
  output.writeStructBegin('InvalidInputException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.DDL_TIME = 'transient_lastDdlTime';
ttypes.HIVE_FILTER_FIELD_OWNER = 'hive_filter_field_owner__';
ttypes.HIVE_FILTER_FIELD_PARAMS = 'hive_filter_field_params__';
ttypes.HIVE_FILTER_FIELD_LAST_ACCESS = 'hive_filter_field_last_access__';
ttypes.IS_ARCHIVED = 'is_archived';
ttypes.ORIGINAL_LOCATION = 'original_location';
ttypes.META_TABLE_COLUMNS = 'columns';
ttypes.META_TABLE_COLUMN_TYPES = 'columns.types';
ttypes.BUCKET_FIELD_NAME = 'bucket_field_name';
ttypes.BUCKET_COUNT = 'bucket_count';
ttypes.FIELD_TO_DIMENSION = 'field_to_dimension';
ttypes.META_TABLE_NAME = 'name';
ttypes.META_TABLE_DB = 'db';
ttypes.META_TABLE_LOCATION = 'location';
ttypes.META_TABLE_SERDE = 'serde';
ttypes.META_TABLE_PARTITION_COLUMNS = 'partition_columns';
ttypes.FILE_INPUT_FORMAT = 'file.inputformat';
ttypes.FILE_OUTPUT_FORMAT = 'file.outputformat';
ttypes.META_TABLE_STORAGE = 'storage_handler';
