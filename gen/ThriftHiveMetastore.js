//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var fb303_ttypes = require('./fb303_types');


var FacebookService = require('./FacebookService');
var FacebookServiceClient = FacebookService.Client;
var FacebookServiceProcessor = FacebookService.Processor;
var ttypes = require('./hive_metastore_types');
//HELPER FUNCTIONS AND STRUCTURES

var ThriftHiveMetastore_create_database_args = function(args) {
  this.database = null;
  if (args) {
    if (args.database !== undefined && args.database !== null) {
      this.database = new ttypes.Database(args.database);
    }
  }
};
ThriftHiveMetastore_create_database_args.prototype = {};
ThriftHiveMetastore_create_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.database = new ttypes.Database();
        this.database.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_database_args');
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRUCT, 1);
    this.database.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_database_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_create_database_result.prototype = {};
ThriftHiveMetastore_create_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_database_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_database_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ThriftHiveMetastore_get_database_args.prototype = {};
ThriftHiveMetastore_get_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_database_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_database_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Database(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_database_result.prototype = {};
ThriftHiveMetastore_get_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Database();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_database_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_database_args = function(args) {
  this.name = null;
  this.deleteData = null;
  this.cascade = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData;
    }
    if (args.cascade !== undefined && args.cascade !== null) {
      this.cascade = args.cascade;
    }
  }
};
ThriftHiveMetastore_drop_database_args.prototype = {};
ThriftHiveMetastore_drop_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.cascade = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_database_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  if (this.cascade !== null && this.cascade !== undefined) {
    output.writeFieldBegin('cascade', Thrift.Type.BOOL, 3);
    output.writeBool(this.cascade);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_database_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidOperationException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_drop_database_result.prototype = {};
ThriftHiveMetastore_drop_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidOperationException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_database_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_databases_args = function(args) {
  this.pattern = null;
  if (args) {
    if (args.pattern !== undefined && args.pattern !== null) {
      this.pattern = args.pattern;
    }
  }
};
ThriftHiveMetastore_get_databases_args.prototype = {};
ThriftHiveMetastore_get_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_databases_args');
  if (this.pattern !== null && this.pattern !== undefined) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 1);
    output.writeString(this.pattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_databases_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_databases_result.prototype = {};
ThriftHiveMetastore_get_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size256 = 0;
        var _rtmp3260;
        this.success = [];
        var _etype259 = 0;
        _rtmp3260 = input.readListBegin();
        _etype259 = _rtmp3260.etype;
        _size256 = _rtmp3260.size;
        for (var _i261 = 0; _i261 < _size256; ++_i261)
        {
          var elem262 = null;
          elem262 = input.readString();
          this.success.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter263 in this.success)
    {
      if (this.success.hasOwnProperty(iter263))
      {
        iter263 = this.success[iter263];
        output.writeString(iter263);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_all_databases_args = function(args) {
};
ThriftHiveMetastore_get_all_databases_args.prototype = {};
ThriftHiveMetastore_get_all_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_databases_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_all_databases_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_all_databases_result.prototype = {};
ThriftHiveMetastore_get_all_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size264 = 0;
        var _rtmp3268;
        this.success = [];
        var _etype267 = 0;
        _rtmp3268 = input.readListBegin();
        _etype267 = _rtmp3268.etype;
        _size264 = _rtmp3268.size;
        for (var _i269 = 0; _i269 < _size264; ++_i269)
        {
          var elem270 = null;
          elem270 = input.readString();
          this.success.push(elem270);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_databases_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter271 in this.success)
    {
      if (this.success.hasOwnProperty(iter271))
      {
        iter271 = this.success[iter271];
        output.writeString(iter271);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_database_args = function(args) {
  this.dbname = null;
  this.db = null;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
    if (args.db !== undefined && args.db !== null) {
      this.db = new ttypes.Database(args.db);
    }
  }
};
ThriftHiveMetastore_alter_database_args.prototype = {};
ThriftHiveMetastore_alter_database_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.db = new ttypes.Database();
        this.db.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_database_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_database_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.db !== null && this.db !== undefined) {
    output.writeFieldBegin('db', Thrift.Type.STRUCT, 2);
    this.db.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_database_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_database_result.prototype = {};
ThriftHiveMetastore_alter_database_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_database_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_database_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_type_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ThriftHiveMetastore_get_type_args.prototype = {};
ThriftHiveMetastore_get_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_type_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Type(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_type_result.prototype = {};
ThriftHiveMetastore_get_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Type();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_type_args = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = new ttypes.Type(args.type);
    }
  }
};
ThriftHiveMetastore_create_type_args.prototype = {};
ThriftHiveMetastore_create_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.type = new ttypes.Type();
        this.type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_type_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 1);
    this.type.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_type_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_create_type_result.prototype = {};
ThriftHiveMetastore_create_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_type_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_type_args = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
ThriftHiveMetastore_drop_type_args.prototype = {};
ThriftHiveMetastore_drop_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_type_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_type_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_type_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_type_result.prototype = {};
ThriftHiveMetastore_drop_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_type_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_type_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_type_all_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ThriftHiveMetastore_get_type_all_args.prototype = {};
ThriftHiveMetastore_get_type_all_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_all_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_type_all_result = function(args) {
  this.success = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Type]);
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_type_all_result.prototype = {};
ThriftHiveMetastore_get_type_all_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size272 = 0;
        var _rtmp3276;
        this.success = {};
        var _ktype273 = 0;
        var _vtype274 = 0;
        _rtmp3276 = input.readMapBegin();
        _ktype273 = _rtmp3276.ktype;
        _vtype274 = _rtmp3276.vtype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var key278 = null;
          var val279 = null;
          key278 = input.readString();
          val279 = new ttypes.Type();
          val279.read(input);
          this.success[key278] = val279;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_type_all_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter280 in this.success)
    {
      if (this.success.hasOwnProperty(kiter280))
      {
        var viter281 = this.success[kiter280];
        output.writeString(kiter280);
        viter281.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_fields_args = function(args) {
  this.db_name = null;
  this.table_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ThriftHiveMetastore_get_fields_args.prototype = {};
ThriftHiveMetastore_get_fields_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_fields_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_fields_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_fields_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FieldSchema]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_get_fields_result.prototype = {};
ThriftHiveMetastore_get_fields_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size282 = 0;
        var _rtmp3286;
        this.success = [];
        var _etype285 = 0;
        _rtmp3286 = input.readListBegin();
        _etype285 = _rtmp3286.etype;
        _size282 = _rtmp3286.size;
        for (var _i287 = 0; _i287 < _size282; ++_i287)
        {
          var elem288 = null;
          elem288 = new ttypes.FieldSchema();
          elem288.read(input);
          this.success.push(elem288);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.UnknownTableException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_fields_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_fields_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter289 in this.success)
    {
      if (this.success.hasOwnProperty(iter289))
      {
        iter289 = this.success[iter289];
        iter289.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_schema_args = function(args) {
  this.db_name = null;
  this.table_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ThriftHiveMetastore_get_schema_args.prototype = {};
ThriftHiveMetastore_get_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_schema_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_schema_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_schema_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FieldSchema]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_get_schema_result.prototype = {};
ThriftHiveMetastore_get_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size290 = 0;
        var _rtmp3294;
        this.success = [];
        var _etype293 = 0;
        _rtmp3294 = input.readListBegin();
        _etype293 = _rtmp3294.etype;
        _size290 = _rtmp3294.size;
        for (var _i295 = 0; _i295 < _size290; ++_i295)
        {
          var elem296 = null;
          elem296 = new ttypes.FieldSchema();
          elem296.read(input);
          this.success.push(elem296);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.UnknownTableException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_schema_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter297 in this.success)
    {
      if (this.success.hasOwnProperty(iter297))
      {
        iter297 = this.success[iter297];
        iter297.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_table_args = function(args) {
  this.tbl = null;
  if (args) {
    if (args.tbl !== undefined && args.tbl !== null) {
      this.tbl = new ttypes.Table(args.tbl);
    }
  }
};
ThriftHiveMetastore_create_table_args.prototype = {};
ThriftHiveMetastore_create_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tbl = new ttypes.Table();
        this.tbl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_args');
  if (this.tbl !== null && this.tbl !== undefined) {
    output.writeFieldBegin('tbl', Thrift.Type.STRUCT, 1);
    this.tbl.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_table_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_create_table_result.prototype = {};
ThriftHiveMetastore_create_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.NoSuchObjectException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_table_with_environment_context_args = function(args) {
  this.tbl = null;
  this.environment_context = null;
  if (args) {
    if (args.tbl !== undefined && args.tbl !== null) {
      this.tbl = new ttypes.Table(args.tbl);
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context);
    }
  }
};
ThriftHiveMetastore_create_table_with_environment_context_args.prototype = {};
ThriftHiveMetastore_create_table_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tbl = new ttypes.Table();
        this.tbl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_table_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_with_environment_context_args');
  if (this.tbl !== null && this.tbl !== undefined) {
    output.writeFieldBegin('tbl', Thrift.Type.STRUCT, 1);
    this.tbl.write(output);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 2);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_table_with_environment_context_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_create_table_with_environment_context_result.prototype = {};
ThriftHiveMetastore_create_table_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.NoSuchObjectException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_table_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_table_with_environment_context_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_table_args = function(args) {
  this.dbname = null;
  this.name = null;
  this.deleteData = null;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_table_args.prototype = {};
ThriftHiveMetastore_drop_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_table_result = function(args) {
  this.o1 = null;
  this.o3 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_drop_table_result.prototype = {};
ThriftHiveMetastore_drop_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_table_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_tables_args = function(args) {
  this.db_name = null;
  this.pattern = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.pattern !== undefined && args.pattern !== null) {
      this.pattern = args.pattern;
    }
  }
};
ThriftHiveMetastore_get_tables_args.prototype = {};
ThriftHiveMetastore_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_tables_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.pattern !== null && this.pattern !== undefined) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 2);
    output.writeString(this.pattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_tables_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_tables_result.prototype = {};
ThriftHiveMetastore_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size298 = 0;
        var _rtmp3302;
        this.success = [];
        var _etype301 = 0;
        _rtmp3302 = input.readListBegin();
        _etype301 = _rtmp3302.etype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          var elem304 = null;
          elem304 = input.readString();
          this.success.push(elem304);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter305 in this.success)
    {
      if (this.success.hasOwnProperty(iter305))
      {
        iter305 = this.success[iter305];
        output.writeString(iter305);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_all_tables_args = function(args) {
  this.db_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
  }
};
ThriftHiveMetastore_get_all_tables_args.prototype = {};
ThriftHiveMetastore_get_all_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_tables_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_all_tables_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_all_tables_result.prototype = {};
ThriftHiveMetastore_get_all_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size306 = 0;
        var _rtmp3310;
        this.success = [];
        var _etype309 = 0;
        _rtmp3310 = input.readListBegin();
        _etype309 = _rtmp3310.etype;
        _size306 = _rtmp3310.size;
        for (var _i311 = 0; _i311 < _size306; ++_i311)
        {
          var elem312 = null;
          elem312 = input.readString();
          this.success.push(elem312);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_all_tables_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter313 in this.success)
    {
      if (this.success.hasOwnProperty(iter313))
      {
        iter313 = this.success[iter313];
        output.writeString(iter313);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_table_args = function(args) {
  this.dbname = null;
  this.tbl_name = null;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
  }
};
ThriftHiveMetastore_get_table_args.prototype = {};
ThriftHiveMetastore_get_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_table_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Table(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_table_result.prototype = {};
ThriftHiveMetastore_get_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Table();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_table_objects_by_name_args = function(args) {
  this.dbname = null;
  this.tbl_names = null;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
    if (args.tbl_names !== undefined && args.tbl_names !== null) {
      this.tbl_names = Thrift.copyList(args.tbl_names, [null]);
    }
  }
};
ThriftHiveMetastore_get_table_objects_by_name_args.prototype = {};
ThriftHiveMetastore_get_table_objects_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size314 = 0;
        var _rtmp3318;
        this.tbl_names = [];
        var _etype317 = 0;
        _rtmp3318 = input.readListBegin();
        _etype317 = _rtmp3318.etype;
        _size314 = _rtmp3318.size;
        for (var _i319 = 0; _i319 < _size314; ++_i319)
        {
          var elem320 = null;
          elem320 = input.readString();
          this.tbl_names.push(elem320);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_objects_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_objects_by_name_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tbl_names !== null && this.tbl_names !== undefined) {
    output.writeFieldBegin('tbl_names', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tbl_names.length);
    for (var iter321 in this.tbl_names)
    {
      if (this.tbl_names.hasOwnProperty(iter321))
      {
        iter321 = this.tbl_names[iter321];
        output.writeString(iter321);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_table_objects_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidOperationException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Table]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_get_table_objects_by_name_result.prototype = {};
ThriftHiveMetastore_get_table_objects_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.success = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new ttypes.Table();
          elem328.read(input);
          this.success.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidOperationException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_objects_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_objects_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter329 in this.success)
    {
      if (this.success.hasOwnProperty(iter329))
      {
        iter329 = this.success[iter329];
        iter329.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_table_names_by_filter_args = function(args) {
  this.dbname = null;
  this.filter = null;
  this.max_tables = -1;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = args.filter;
    }
    if (args.max_tables !== undefined && args.max_tables !== null) {
      this.max_tables = args.max_tables;
    }
  }
};
ThriftHiveMetastore_get_table_names_by_filter_args.prototype = {};
ThriftHiveMetastore_get_table_names_by_filter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_tables = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_names_by_filter_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_names_by_filter_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 2);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  if (this.max_tables !== null && this.max_tables !== undefined) {
    output.writeFieldBegin('max_tables', Thrift.Type.I16, 3);
    output.writeI16(this.max_tables);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_table_names_by_filter_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidOperationException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_get_table_names_by_filter_result.prototype = {};
ThriftHiveMetastore_get_table_names_by_filter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size330 = 0;
        var _rtmp3334;
        this.success = [];
        var _etype333 = 0;
        _rtmp3334 = input.readListBegin();
        _etype333 = _rtmp3334.etype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var elem336 = null;
          elem336 = input.readString();
          this.success.push(elem336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidOperationException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_names_by_filter_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_names_by_filter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter337 in this.success)
    {
      if (this.success.hasOwnProperty(iter337))
      {
        iter337 = this.success[iter337];
        output.writeString(iter337);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_table_args = function(args) {
  this.dbname = null;
  this.tbl_name = null;
  this.new_tbl = null;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_tbl !== undefined && args.new_tbl !== null) {
      this.new_tbl = new ttypes.Table(args.new_tbl);
    }
  }
};
ThriftHiveMetastore_alter_table_args.prototype = {};
ThriftHiveMetastore_alter_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_tbl = new ttypes.Table();
        this.new_tbl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_tbl !== null && this.new_tbl !== undefined) {
    output.writeFieldBegin('new_tbl', Thrift.Type.STRUCT, 3);
    this.new_tbl.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_table_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_table_result.prototype = {};
ThriftHiveMetastore_alter_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_table_with_environment_context_args = function(args) {
  this.dbname = null;
  this.tbl_name = null;
  this.new_tbl = null;
  this.environment_context = null;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_tbl !== undefined && args.new_tbl !== null) {
      this.new_tbl = new ttypes.Table(args.new_tbl);
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context);
    }
  }
};
ThriftHiveMetastore_alter_table_with_environment_context_args.prototype = {};
ThriftHiveMetastore_alter_table_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_tbl = new ttypes.Table();
        this.new_tbl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_with_environment_context_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_tbl !== null && this.new_tbl !== undefined) {
    output.writeFieldBegin('new_tbl', Thrift.Type.STRUCT, 3);
    this.new_tbl.write(output);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_table_with_environment_context_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_table_with_environment_context_result.prototype = {};
ThriftHiveMetastore_alter_table_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_table_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_table_with_environment_context_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_partition_args = function(args) {
  this.new_part = null;
  if (args) {
    if (args.new_part !== undefined && args.new_part !== null) {
      this.new_part = new ttypes.Partition(args.new_part);
    }
  }
};
ThriftHiveMetastore_add_partition_args.prototype = {};
ThriftHiveMetastore_add_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_args');
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 1);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_partition_result.prototype = {};
ThriftHiveMetastore_add_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_partition_with_environment_context_args = function(args) {
  this.new_part = null;
  this.environment_context = null;
  if (args) {
    if (args.new_part !== undefined && args.new_part !== null) {
      this.new_part = new ttypes.Partition(args.new_part);
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context);
    }
  }
};
ThriftHiveMetastore_add_partition_with_environment_context_args.prototype = {};
ThriftHiveMetastore_add_partition_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_with_environment_context_args');
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 1);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 2);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_partition_with_environment_context_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_partition_with_environment_context_result.prototype = {};
ThriftHiveMetastore_add_partition_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partition_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partition_with_environment_context_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_partitions_args = function(args) {
  this.new_parts = null;
  if (args) {
    if (args.new_parts !== undefined && args.new_parts !== null) {
      this.new_parts = Thrift.copyList(args.new_parts, [ttypes.Partition]);
    }
  }
};
ThriftHiveMetastore_add_partitions_args.prototype = {};
ThriftHiveMetastore_add_partitions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size338 = 0;
        var _rtmp3342;
        this.new_parts = [];
        var _etype341 = 0;
        _rtmp3342 = input.readListBegin();
        _etype341 = _rtmp3342.etype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var elem344 = null;
          elem344 = new ttypes.Partition();
          elem344.read(input);
          this.new_parts.push(elem344);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_args');
  if (this.new_parts !== null && this.new_parts !== undefined) {
    output.writeFieldBegin('new_parts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.new_parts.length);
    for (var iter345 in this.new_parts)
    {
      if (this.new_parts.hasOwnProperty(iter345))
      {
        iter345 = this.new_parts[iter345];
        iter345.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_partitions_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_partitions_result.prototype = {};
ThriftHiveMetastore_add_partitions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_partitions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_append_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null]);
    }
  }
};
ThriftHiveMetastore_append_partition_args.prototype = {};
ThriftHiveMetastore_append_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size346 = 0;
        var _rtmp3350;
        this.part_vals = [];
        var _etype349 = 0;
        _rtmp3350 = input.readListBegin();
        _etype349 = _rtmp3350.etype;
        _size346 = _rtmp3350.size;
        for (var _i351 = 0; _i351 < _size346; ++_i351)
        {
          var elem352 = null;
          elem352 = input.readString();
          this.part_vals.push(elem352);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter353 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter353))
      {
        iter353 = this.part_vals[iter353];
        output.writeString(iter353);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_append_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_append_partition_result.prototype = {};
ThriftHiveMetastore_append_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_append_partition_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_append_partition_by_name_args.prototype = {};
ThriftHiveMetastore_append_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_append_partition_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_append_partition_by_name_result.prototype = {};
ThriftHiveMetastore_append_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_append_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.deleteData = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null]);
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_partition_args.prototype = {};
ThriftHiveMetastore_drop_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size354 = 0;
        var _rtmp3358;
        this.part_vals = [];
        var _etype357 = 0;
        _rtmp3358 = input.readListBegin();
        _etype357 = _rtmp3358.etype;
        _size354 = _rtmp3358.size;
        for (var _i359 = 0; _i359 < _size354; ++_i359)
        {
          var elem360 = null;
          elem360 = input.readString();
          this.part_vals.push(elem360);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter361 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter361))
      {
        iter361 = this.part_vals[iter361];
        output.writeString(iter361);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_partition_result.prototype = {};
ThriftHiveMetastore_drop_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_partition_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  this.deleteData = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name;
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_partition_by_name_args.prototype = {};
ThriftHiveMetastore_drop_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_partition_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_partition_by_name_result.prototype = {};
ThriftHiveMetastore_drop_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null]);
    }
  }
};
ThriftHiveMetastore_get_partition_args.prototype = {};
ThriftHiveMetastore_get_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size362 = 0;
        var _rtmp3366;
        this.part_vals = [];
        var _etype365 = 0;
        _rtmp3366 = input.readListBegin();
        _etype365 = _rtmp3366.etype;
        _size362 = _rtmp3366.size;
        for (var _i367 = 0; _i367 < _size362; ++_i367)
        {
          var elem368 = null;
          elem368 = input.readString();
          this.part_vals.push(elem368);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter369 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter369))
      {
        iter369 = this.part_vals[iter369];
        output.writeString(iter369);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_result.prototype = {};
ThriftHiveMetastore_get_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_with_auth_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null]);
    }
    if (args.user_name !== undefined && args.user_name !== null) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined && args.group_names !== null) {
      this.group_names = Thrift.copyList(args.group_names, [null]);
    }
  }
};
ThriftHiveMetastore_get_partition_with_auth_args.prototype = {};
ThriftHiveMetastore_get_partition_with_auth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size370 = 0;
        var _rtmp3374;
        this.part_vals = [];
        var _etype373 = 0;
        _rtmp3374 = input.readListBegin();
        _etype373 = _rtmp3374.etype;
        _size370 = _rtmp3374.size;
        for (var _i375 = 0; _i375 < _size370; ++_i375)
        {
          var elem376 = null;
          elem376 = input.readString();
          this.part_vals.push(elem376);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size377 = 0;
        var _rtmp3381;
        this.group_names = [];
        var _etype380 = 0;
        _rtmp3381 = input.readListBegin();
        _etype380 = _rtmp3381.etype;
        _size377 = _rtmp3381.size;
        for (var _i382 = 0; _i382 < _size377; ++_i382)
        {
          var elem383 = null;
          elem383 = input.readString();
          this.group_names.push(elem383);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_with_auth_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter384 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter384))
      {
        iter384 = this.part_vals[iter384];
        output.writeString(iter384);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 4);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter385 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter385))
      {
        iter385 = this.group_names[iter385];
        output.writeString(iter385);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_with_auth_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_with_auth_result.prototype = {};
ThriftHiveMetastore_get_partition_with_auth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_with_auth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_get_partition_by_name_args.prototype = {};
ThriftHiveMetastore_get_partition_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Partition(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_by_name_result.prototype = {};
ThriftHiveMetastore_get_partition_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partitions_args.prototype = {};
ThriftHiveMetastore_get_partitions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_result.prototype = {};
ThriftHiveMetastore_get_partitions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size386 = 0;
        var _rtmp3390;
        this.success = [];
        var _etype389 = 0;
        _rtmp3390 = input.readListBegin();
        _etype389 = _rtmp3390.etype;
        _size386 = _rtmp3390.size;
        for (var _i391 = 0; _i391 < _size386; ++_i391)
        {
          var elem392 = null;
          elem392 = new ttypes.Partition();
          elem392.read(input);
          this.success.push(elem392);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter393 in this.success)
    {
      if (this.success.hasOwnProperty(iter393))
      {
        iter393 = this.success[iter393];
        iter393.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_with_auth_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_parts = -1;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts;
    }
    if (args.user_name !== undefined && args.user_name !== null) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined && args.group_names !== null) {
      this.group_names = Thrift.copyList(args.group_names, [null]);
    }
  }
};
ThriftHiveMetastore_get_partitions_with_auth_args.prototype = {};
ThriftHiveMetastore_get_partitions_with_auth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size394 = 0;
        var _rtmp3398;
        this.group_names = [];
        var _etype397 = 0;
        _rtmp3398 = input.readListBegin();
        _etype397 = _rtmp3398.etype;
        _size394 = _rtmp3398.size;
        for (var _i399 = 0; _i399 < _size394; ++_i399)
        {
          var elem400 = null;
          elem400 = input.readString();
          this.group_names.push(elem400);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_with_auth_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 4);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter401 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter401))
      {
        iter401 = this.group_names[iter401];
        output.writeString(iter401);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_with_auth_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_with_auth_result.prototype = {};
ThriftHiveMetastore_get_partitions_with_auth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size402 = 0;
        var _rtmp3406;
        this.success = [];
        var _etype405 = 0;
        _rtmp3406 = input.readListBegin();
        _etype405 = _rtmp3406.etype;
        _size402 = _rtmp3406.size;
        for (var _i407 = 0; _i407 < _size402; ++_i407)
        {
          var elem408 = null;
          elem408 = new ttypes.Partition();
          elem408.read(input);
          this.success.push(elem408);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_with_auth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter409 in this.success)
    {
      if (this.success.hasOwnProperty(iter409))
      {
        iter409 = this.success[iter409];
        iter409.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_names_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partition_names_args.prototype = {};
ThriftHiveMetastore_get_partition_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_names_result = function(args) {
  this.success = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_names_result.prototype = {};
ThriftHiveMetastore_get_partition_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size410 = 0;
        var _rtmp3414;
        this.success = [];
        var _etype413 = 0;
        _rtmp3414 = input.readListBegin();
        _etype413 = _rtmp3414.etype;
        _size410 = _rtmp3414.size;
        for (var _i415 = 0; _i415 < _size410; ++_i415)
        {
          var elem416 = null;
          elem416 = input.readString();
          this.success.push(elem416);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter417 in this.success)
    {
      if (this.success.hasOwnProperty(iter417))
      {
        iter417 = this.success[iter417];
        output.writeString(iter417);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_ps_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null]);
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_args.prototype = {};
ThriftHiveMetastore_get_partitions_ps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size418 = 0;
        var _rtmp3422;
        this.part_vals = [];
        var _etype421 = 0;
        _rtmp3422 = input.readListBegin();
        _etype421 = _rtmp3422.etype;
        _size418 = _rtmp3422.size;
        for (var _i423 = 0; _i423 < _size418; ++_i423)
        {
          var elem424 = null;
          elem424 = input.readString();
          this.part_vals.push(elem424);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter425 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter425))
      {
        iter425 = this.part_vals[iter425];
        output.writeString(iter425);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_ps_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_result.prototype = {};
ThriftHiveMetastore_get_partitions_ps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size426 = 0;
        var _rtmp3430;
        this.success = [];
        var _etype429 = 0;
        _rtmp3430 = input.readListBegin();
        _etype429 = _rtmp3430.etype;
        _size426 = _rtmp3430.size;
        for (var _i431 = 0; _i431 < _size426; ++_i431)
        {
          var elem432 = null;
          elem432 = new ttypes.Partition();
          elem432.read(input);
          this.success.push(elem432);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter433 in this.success)
    {
      if (this.success.hasOwnProperty(iter433))
      {
        iter433 = this.success[iter433];
        iter433.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_ps_with_auth_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.max_parts = -1;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null]);
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts;
    }
    if (args.user_name !== undefined && args.user_name !== null) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined && args.group_names !== null) {
      this.group_names = Thrift.copyList(args.group_names, [null]);
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype = {};
ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size434 = 0;
        var _rtmp3438;
        this.part_vals = [];
        var _etype437 = 0;
        _rtmp3438 = input.readListBegin();
        _etype437 = _rtmp3438.etype;
        _size434 = _rtmp3438.size;
        for (var _i439 = 0; _i439 < _size434; ++_i439)
        {
          var elem440 = null;
          elem440 = input.readString();
          this.part_vals.push(elem440);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size441 = 0;
        var _rtmp3445;
        this.group_names = [];
        var _etype444 = 0;
        _rtmp3445 = input.readListBegin();
        _etype444 = _rtmp3445.etype;
        _size441 = _rtmp3445.size;
        for (var _i446 = 0; _i446 < _size441; ++_i446)
        {
          var elem447 = null;
          elem447 = input.readString();
          this.group_names.push(elem447);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_with_auth_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter448 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter448))
      {
        iter448 = this.part_vals[iter448];
        output.writeString(iter448);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 5);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter449 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter449))
      {
        iter449 = this.group_names[iter449];
        output.writeString(iter449);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_ps_with_auth_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype = {};
ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size450 = 0;
        var _rtmp3454;
        this.success = [];
        var _etype453 = 0;
        _rtmp3454 = input.readListBegin();
        _etype453 = _rtmp3454.etype;
        _size450 = _rtmp3454.size;
        for (var _i455 = 0; _i455 < _size450; ++_i455)
        {
          var elem456 = null;
          elem456 = new ttypes.Partition();
          elem456.read(input);
          this.success.push(elem456);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_with_auth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter457 in this.success)
    {
      if (this.success.hasOwnProperty(iter457))
      {
        iter457 = this.success[iter457];
        iter457.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_names_ps_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null]);
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partition_names_ps_args.prototype = {};
ThriftHiveMetastore_get_partition_names_ps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size458 = 0;
        var _rtmp3462;
        this.part_vals = [];
        var _etype461 = 0;
        _rtmp3462 = input.readListBegin();
        _etype461 = _rtmp3462.etype;
        _size458 = _rtmp3462.size;
        for (var _i463 = 0; _i463 < _size458; ++_i463)
        {
          var elem464 = null;
          elem464 = input.readString();
          this.part_vals.push(elem464);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_ps_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter465 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter465))
      {
        iter465 = this.part_vals[iter465];
        output.writeString(iter465);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_names_ps_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partition_names_ps_result.prototype = {};
ThriftHiveMetastore_get_partition_names_ps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size466 = 0;
        var _rtmp3470;
        this.success = [];
        var _etype469 = 0;
        _rtmp3470 = input.readListBegin();
        _etype469 = _rtmp3470.etype;
        _size466 = _rtmp3470.size;
        for (var _i471 = 0; _i471 < _size466; ++_i471)
        {
          var elem472 = null;
          elem472 = input.readString();
          this.success.push(elem472);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_names_ps_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter473 in this.success)
    {
      if (this.success.hasOwnProperty(iter473))
      {
        iter473 = this.success[iter473];
        output.writeString(iter473);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_by_filter_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.filter = null;
  this.max_parts = -1;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = args.filter;
    }
    if (args.max_parts !== undefined && args.max_parts !== null) {
      this.max_parts = args.max_parts;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_filter_args.prototype = {};
ThriftHiveMetastore_get_partitions_by_filter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_filter_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_filter_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 3);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  if (this.max_parts !== null && this.max_parts !== undefined) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4);
    output.writeI16(this.max_parts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_by_filter_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_filter_result.prototype = {};
ThriftHiveMetastore_get_partitions_by_filter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size474 = 0;
        var _rtmp3478;
        this.success = [];
        var _etype477 = 0;
        _rtmp3478 = input.readListBegin();
        _etype477 = _rtmp3478.etype;
        _size474 = _rtmp3478.size;
        for (var _i479 = 0; _i479 < _size474; ++_i479)
        {
          var elem480 = null;
          elem480 = new ttypes.Partition();
          elem480.read(input);
          this.success.push(elem480);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_filter_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_filter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter481 in this.success)
    {
      if (this.success.hasOwnProperty(iter481))
      {
        iter481 = this.success[iter481];
        iter481.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_by_names_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.names = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.names !== undefined && args.names !== null) {
      this.names = Thrift.copyList(args.names, [null]);
    }
  }
};
ThriftHiveMetastore_get_partitions_by_names_args.prototype = {};
ThriftHiveMetastore_get_partitions_by_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size482 = 0;
        var _rtmp3486;
        this.names = [];
        var _etype485 = 0;
        _rtmp3486 = input.readListBegin();
        _etype485 = _rtmp3486.etype;
        _size482 = _rtmp3486.size;
        for (var _i487 = 0; _i487 < _size482; ++_i487)
        {
          var elem488 = null;
          elem488 = input.readString();
          this.names.push(elem488);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_names_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.names !== null && this.names !== undefined) {
    output.writeFieldBegin('names', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.names.length);
    for (var iter489 in this.names)
    {
      if (this.names.hasOwnProperty(iter489))
      {
        iter489 = this.names[iter489];
        output.writeString(iter489);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partitions_by_names_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Partition]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_partitions_by_names_result.prototype = {};
ThriftHiveMetastore_get_partitions_by_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size490 = 0;
        var _rtmp3494;
        this.success = [];
        var _etype493 = 0;
        _rtmp3494 = input.readListBegin();
        _etype493 = _rtmp3494.etype;
        _size490 = _rtmp3494.size;
        for (var _i495 = 0; _i495 < _size490; ++_i495)
        {
          var elem496 = null;
          elem496 = new ttypes.Partition();
          elem496.read(input);
          this.success.push(elem496);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partitions_by_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_names_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter497 in this.success)
    {
      if (this.success.hasOwnProperty(iter497))
      {
        iter497 = this.success[iter497];
        iter497.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.new_part = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_part !== undefined && args.new_part !== null) {
      this.new_part = new ttypes.Partition(args.new_part);
    }
  }
};
ThriftHiveMetastore_alter_partition_args.prototype = {};
ThriftHiveMetastore_alter_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 3);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_partition_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_partition_result.prototype = {};
ThriftHiveMetastore_alter_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_partitions_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.new_parts = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_parts !== undefined && args.new_parts !== null) {
      this.new_parts = Thrift.copyList(args.new_parts, [ttypes.Partition]);
    }
  }
};
ThriftHiveMetastore_alter_partitions_args.prototype = {};
ThriftHiveMetastore_alter_partitions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size498 = 0;
        var _rtmp3502;
        this.new_parts = [];
        var _etype501 = 0;
        _rtmp3502 = input.readListBegin();
        _etype501 = _rtmp3502.etype;
        _size498 = _rtmp3502.size;
        for (var _i503 = 0; _i503 < _size498; ++_i503)
        {
          var elem504 = null;
          elem504 = new ttypes.Partition();
          elem504.read(input);
          this.new_parts.push(elem504);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partitions_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partitions_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_parts !== null && this.new_parts !== undefined) {
    output.writeFieldBegin('new_parts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.new_parts.length);
    for (var iter505 in this.new_parts)
    {
      if (this.new_parts.hasOwnProperty(iter505))
      {
        iter505 = this.new_parts[iter505];
        iter505.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_partitions_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_partitions_result.prototype = {};
ThriftHiveMetastore_alter_partitions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partitions_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partitions_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_partition_with_environment_context_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.new_part = null;
  this.environment_context = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.new_part !== undefined && args.new_part !== null) {
      this.new_part = new ttypes.Partition(args.new_part);
    }
    if (args.environment_context !== undefined && args.environment_context !== null) {
      this.environment_context = new ttypes.EnvironmentContext(args.environment_context);
    }
  }
};
ThriftHiveMetastore_alter_partition_with_environment_context_args.prototype = {};
ThriftHiveMetastore_alter_partition_with_environment_context_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.environment_context = new ttypes.EnvironmentContext();
        this.environment_context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_with_environment_context_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_with_environment_context_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 3);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  if (this.environment_context !== null && this.environment_context !== undefined) {
    output.writeFieldBegin('environment_context', Thrift.Type.STRUCT, 4);
    this.environment_context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_partition_with_environment_context_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_partition_with_environment_context_result.prototype = {};
ThriftHiveMetastore_alter_partition_with_environment_context_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_partition_with_environment_context_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_with_environment_context_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_rename_partition_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.new_part = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyList(args.part_vals, [null]);
    }
    if (args.new_part !== undefined && args.new_part !== null) {
      this.new_part = new ttypes.Partition(args.new_part);
    }
  }
};
ThriftHiveMetastore_rename_partition_args.prototype = {};
ThriftHiveMetastore_rename_partition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size506 = 0;
        var _rtmp3510;
        this.part_vals = [];
        var _etype509 = 0;
        _rtmp3510 = input.readListBegin();
        _etype509 = _rtmp3510.etype;
        _size506 = _rtmp3510.size;
        for (var _i511 = 0; _i511 < _size506; ++_i511)
        {
          var elem512 = null;
          elem512 = input.readString();
          this.part_vals.push(elem512);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition();
        this.new_part.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_rename_partition_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_rename_partition_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.part_vals.length);
    for (var iter513 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(iter513))
      {
        iter513 = this.part_vals[iter513];
        output.writeString(iter513);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.new_part !== null && this.new_part !== undefined) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 4);
    this.new_part.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_rename_partition_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_rename_partition_result.prototype = {};
ThriftHiveMetastore_rename_partition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_rename_partition_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_rename_partition_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_config_value_args = function(args) {
  this.name = null;
  this.defaultValue = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.defaultValue !== undefined && args.defaultValue !== null) {
      this.defaultValue = args.defaultValue;
    }
  }
};
ThriftHiveMetastore_get_config_value_args.prototype = {};
ThriftHiveMetastore_get_config_value_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.defaultValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_config_value_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.defaultValue !== null && this.defaultValue !== undefined) {
    output.writeFieldBegin('defaultValue', Thrift.Type.STRING, 2);
    output.writeString(this.defaultValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_config_value_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.ConfigValSecurityException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_config_value_result.prototype = {};
ThriftHiveMetastore_get_config_value_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.ConfigValSecurityException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_config_value_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_partition_name_to_vals_args = function(args) {
  this.part_name = null;
  if (args) {
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_partition_name_to_vals_args.prototype = {};
ThriftHiveMetastore_partition_name_to_vals_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_vals_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_args');
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_partition_name_to_vals_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_partition_name_to_vals_result.prototype = {};
ThriftHiveMetastore_partition_name_to_vals_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size514 = 0;
        var _rtmp3518;
        this.success = [];
        var _etype517 = 0;
        _rtmp3518 = input.readListBegin();
        _etype517 = _rtmp3518.etype;
        _size514 = _rtmp3518.size;
        for (var _i519 = 0; _i519 < _size514; ++_i519)
        {
          var elem520 = null;
          elem520 = input.readString();
          this.success.push(elem520);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_vals_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter521 in this.success)
    {
      if (this.success.hasOwnProperty(iter521))
      {
        iter521 = this.success[iter521];
        output.writeString(iter521);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_partition_name_to_spec_args = function(args) {
  this.part_name = null;
  if (args) {
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name;
    }
  }
};
ThriftHiveMetastore_partition_name_to_spec_args.prototype = {};
ThriftHiveMetastore_partition_name_to_spec_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_spec_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_args');
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_partition_name_to_spec_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_partition_name_to_spec_result.prototype = {};
ThriftHiveMetastore_partition_name_to_spec_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size522 = 0;
        var _rtmp3526;
        this.success = {};
        var _ktype523 = 0;
        var _vtype524 = 0;
        _rtmp3526 = input.readMapBegin();
        _ktype523 = _rtmp3526.ktype;
        _vtype524 = _rtmp3526.vtype;
        _size522 = _rtmp3526.size;
        for (var _i527 = 0; _i527 < _size522; ++_i527)
        {
          var key528 = null;
          var val529 = null;
          key528 = input.readString();
          val529 = input.readString();
          this.success[key528] = val529;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_partition_name_to_spec_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter530 in this.success)
    {
      if (this.success.hasOwnProperty(kiter530))
      {
        var viter531 = this.success[kiter530];
        output.writeString(kiter530);
        output.writeString(viter531);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_markPartitionForEvent_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.eventType = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyMap(args.part_vals, [null]);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
  }
};
ThriftHiveMetastore_markPartitionForEvent_args.prototype = {};
ThriftHiveMetastore_markPartitionForEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size532 = 0;
        var _rtmp3536;
        this.part_vals = {};
        var _ktype533 = 0;
        var _vtype534 = 0;
        _rtmp3536 = input.readMapBegin();
        _ktype533 = _rtmp3536.ktype;
        _vtype534 = _rtmp3536.vtype;
        _size532 = _rtmp3536.size;
        for (var _i537 = 0; _i537 < _size532; ++_i537)
        {
          var key538 = null;
          var val539 = null;
          key538 = input.readString();
          val539 = input.readString();
          this.part_vals[key538] = val539;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_markPartitionForEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_markPartitionForEvent_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.part_vals));
    for (var kiter540 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(kiter540))
      {
        var viter541 = this.part_vals[kiter540];
        output.writeString(kiter540);
        output.writeString(viter541);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 4);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_markPartitionForEvent_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  this.o5 = null;
  this.o6 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o4 = args;
    return;
  }
  if (args instanceof ttypes.UnknownPartitionException) {
    this.o5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartitionException) {
    this.o6 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4;
    }
    if (args.o5 !== undefined && args.o5 !== null) {
      this.o5 = args.o5;
    }
    if (args.o6 !== undefined && args.o6 !== null) {
      this.o6 = args.o6;
    }
  }
};
ThriftHiveMetastore_markPartitionForEvent_result.prototype = {};
ThriftHiveMetastore_markPartitionForEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.UnknownTableException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.o5 = new ttypes.UnknownPartitionException();
        this.o5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.o6 = new ttypes.InvalidPartitionException();
        this.o6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_markPartitionForEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_markPartitionForEvent_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  if (this.o5 !== null && this.o5 !== undefined) {
    output.writeFieldBegin('o5', Thrift.Type.STRUCT, 5);
    this.o5.write(output);
    output.writeFieldEnd();
  }
  if (this.o6 !== null && this.o6 !== undefined) {
    output.writeFieldBegin('o6', Thrift.Type.STRUCT, 6);
    this.o6.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_isPartitionMarkedForEvent_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_vals = null;
  this.eventType = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_vals !== undefined && args.part_vals !== null) {
      this.part_vals = Thrift.copyMap(args.part_vals, [null]);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
  }
};
ThriftHiveMetastore_isPartitionMarkedForEvent_args.prototype = {};
ThriftHiveMetastore_isPartitionMarkedForEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size542 = 0;
        var _rtmp3546;
        this.part_vals = {};
        var _ktype543 = 0;
        var _vtype544 = 0;
        _rtmp3546 = input.readMapBegin();
        _ktype543 = _rtmp3546.ktype;
        _vtype544 = _rtmp3546.vtype;
        _size542 = _rtmp3546.size;
        for (var _i547 = 0; _i547 < _size542; ++_i547)
        {
          var key548 = null;
          var val549 = null;
          key548 = input.readString();
          val549 = input.readString();
          this.part_vals[key548] = val549;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_isPartitionMarkedForEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_isPartitionMarkedForEvent_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_vals !== null && this.part_vals !== undefined) {
    output.writeFieldBegin('part_vals', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.part_vals));
    for (var kiter550 in this.part_vals)
    {
      if (this.part_vals.hasOwnProperty(kiter550))
      {
        var viter551 = this.part_vals[kiter550];
        output.writeString(kiter550);
        output.writeString(viter551);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 4);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_isPartitionMarkedForEvent_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  this.o5 = null;
  this.o6 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.UnknownDBException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.UnknownTableException) {
    this.o4 = args;
    return;
  }
  if (args instanceof ttypes.UnknownPartitionException) {
    this.o5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartitionException) {
    this.o6 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4;
    }
    if (args.o5 !== undefined && args.o5 !== null) {
      this.o5 = args.o5;
    }
    if (args.o6 !== undefined && args.o6 !== null) {
      this.o6 = args.o6;
    }
  }
};
ThriftHiveMetastore_isPartitionMarkedForEvent_result.prototype = {};
ThriftHiveMetastore_isPartitionMarkedForEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.UnknownTableException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.o5 = new ttypes.UnknownPartitionException();
        this.o5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.o6 = new ttypes.InvalidPartitionException();
        this.o6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_isPartitionMarkedForEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_isPartitionMarkedForEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  if (this.o5 !== null && this.o5 !== undefined) {
    output.writeFieldBegin('o5', Thrift.Type.STRUCT, 5);
    this.o5.write(output);
    output.writeFieldEnd();
  }
  if (this.o6 !== null && this.o6 !== undefined) {
    output.writeFieldBegin('o6', Thrift.Type.STRUCT, 6);
    this.o6.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_index_args = function(args) {
  this.new_index = null;
  this.index_table = null;
  if (args) {
    if (args.new_index !== undefined && args.new_index !== null) {
      this.new_index = new ttypes.Index(args.new_index);
    }
    if (args.index_table !== undefined && args.index_table !== null) {
      this.index_table = new ttypes.Table(args.index_table);
    }
  }
};
ThriftHiveMetastore_add_index_args.prototype = {};
ThriftHiveMetastore_add_index_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_index = new ttypes.Index();
        this.new_index.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.index_table = new ttypes.Table();
        this.index_table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_index_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_index_args');
  if (this.new_index !== null && this.new_index !== undefined) {
    output.writeFieldBegin('new_index', Thrift.Type.STRUCT, 1);
    this.new_index.write(output);
    output.writeFieldEnd();
  }
  if (this.index_table !== null && this.index_table !== undefined) {
    output.writeFieldBegin('index_table', Thrift.Type.STRUCT, 2);
    this.index_table.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_add_index_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  if (args instanceof ttypes.InvalidObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExistsException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Index(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
  }
};
ThriftHiveMetastore_add_index_result.prototype = {};
ThriftHiveMetastore_add_index_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Index();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_add_index_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_add_index_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_index_args = function(args) {
  this.dbname = null;
  this.base_tbl_name = null;
  this.idx_name = null;
  this.new_idx = null;
  if (args) {
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
    if (args.base_tbl_name !== undefined && args.base_tbl_name !== null) {
      this.base_tbl_name = args.base_tbl_name;
    }
    if (args.idx_name !== undefined && args.idx_name !== null) {
      this.idx_name = args.idx_name;
    }
    if (args.new_idx !== undefined && args.new_idx !== null) {
      this.new_idx = new ttypes.Index(args.new_idx);
    }
  }
};
ThriftHiveMetastore_alter_index_args.prototype = {};
ThriftHiveMetastore_alter_index_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.base_tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.idx_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.new_idx = new ttypes.Index();
        this.new_idx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_index_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_index_args');
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  if (this.base_tbl_name !== null && this.base_tbl_name !== undefined) {
    output.writeFieldBegin('base_tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.base_tbl_name);
    output.writeFieldEnd();
  }
  if (this.idx_name !== null && this.idx_name !== undefined) {
    output.writeFieldBegin('idx_name', Thrift.Type.STRING, 3);
    output.writeString(this.idx_name);
    output.writeFieldEnd();
  }
  if (this.new_idx !== null && this.new_idx !== undefined) {
    output.writeFieldBegin('new_idx', Thrift.Type.STRUCT, 4);
    this.new_idx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_alter_index_result = function(args) {
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.InvalidOperationException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_alter_index_result.prototype = {};
ThriftHiveMetastore_alter_index_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_alter_index_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_alter_index_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_index_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.index_name = null;
  this.deleteData = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.index_name !== undefined && args.index_name !== null) {
      this.index_name = args.index_name;
    }
    if (args.deleteData !== undefined && args.deleteData !== null) {
      this.deleteData = args.deleteData;
    }
  }
};
ThriftHiveMetastore_drop_index_by_name_args.prototype = {};
ThriftHiveMetastore_drop_index_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.index_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_index_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_index_by_name_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.index_name !== null && this.index_name !== undefined) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 3);
    output.writeString(this.index_name);
    output.writeFieldEnd();
  }
  if (this.deleteData !== null && this.deleteData !== undefined) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_index_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_drop_index_by_name_result.prototype = {};
ThriftHiveMetastore_drop_index_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_index_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_index_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_index_by_name_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.index_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.index_name !== undefined && args.index_name !== null) {
      this.index_name = args.index_name;
    }
  }
};
ThriftHiveMetastore_get_index_by_name_args.prototype = {};
ThriftHiveMetastore_get_index_by_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.index_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_by_name_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_by_name_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.index_name !== null && this.index_name !== undefined) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 3);
    output.writeString(this.index_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_index_by_name_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Index(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_index_by_name_result.prototype = {};
ThriftHiveMetastore_get_index_by_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Index();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_by_name_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_by_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_indexes_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_indexes = -1;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_indexes !== undefined && args.max_indexes !== null) {
      this.max_indexes = args.max_indexes;
    }
  }
};
ThriftHiveMetastore_get_indexes_args.prototype = {};
ThriftHiveMetastore_get_indexes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_indexes = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_indexes_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_indexes_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_indexes !== null && this.max_indexes !== undefined) {
    output.writeFieldBegin('max_indexes', Thrift.Type.I16, 3);
    output.writeI16(this.max_indexes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_indexes_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Index]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_indexes_result.prototype = {};
ThriftHiveMetastore_get_indexes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size552 = 0;
        var _rtmp3556;
        this.success = [];
        var _etype555 = 0;
        _rtmp3556 = input.readListBegin();
        _etype555 = _rtmp3556.etype;
        _size552 = _rtmp3556.size;
        for (var _i557 = 0; _i557 < _size552; ++_i557)
        {
          var elem558 = null;
          elem558 = new ttypes.Index();
          elem558.read(input);
          this.success.push(elem558);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_indexes_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_indexes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter559 in this.success)
    {
      if (this.success.hasOwnProperty(iter559))
      {
        iter559 = this.success[iter559];
        iter559.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_index_names_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.max_indexes = -1;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.max_indexes !== undefined && args.max_indexes !== null) {
      this.max_indexes = args.max_indexes;
    }
  }
};
ThriftHiveMetastore_get_index_names_args.prototype = {};
ThriftHiveMetastore_get_index_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.max_indexes = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_names_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.max_indexes !== null && this.max_indexes !== undefined) {
    output.writeFieldBegin('max_indexes', Thrift.Type.I16, 3);
    output.writeI16(this.max_indexes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_index_names_result = function(args) {
  this.success = null;
  this.o2 = null;
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
  }
};
ThriftHiveMetastore_get_index_names_result.prototype = {};
ThriftHiveMetastore_get_index_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size560 = 0;
        var _rtmp3564;
        this.success = [];
        var _etype563 = 0;
        _rtmp3564 = input.readListBegin();
        _etype563 = _rtmp3564.etype;
        _size560 = _rtmp3564.size;
        for (var _i565 = 0; _i565 < _size560; ++_i565)
        {
          var elem566 = null;
          elem566 = input.readString();
          this.success.push(elem566);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_index_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_index_names_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter567 in this.success)
    {
      if (this.success.hasOwnProperty(iter567))
      {
        iter567 = this.success[iter567];
        output.writeString(iter567);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_update_table_column_statistics_args = function(args) {
  this.stats_obj = null;
  if (args) {
    if (args.stats_obj !== undefined && args.stats_obj !== null) {
      this.stats_obj = new ttypes.ColumnStatistics(args.stats_obj);
    }
  }
};
ThriftHiveMetastore_update_table_column_statistics_args.prototype = {};
ThriftHiveMetastore_update_table_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.stats_obj = new ttypes.ColumnStatistics();
        this.stats_obj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_update_table_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_table_column_statistics_args');
  if (this.stats_obj !== null && this.stats_obj !== undefined) {
    output.writeFieldBegin('stats_obj', Thrift.Type.STRUCT, 1);
    this.stats_obj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_update_table_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_update_table_column_statistics_result.prototype = {};
ThriftHiveMetastore_update_table_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidInputException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_update_table_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_table_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_update_partition_column_statistics_args = function(args) {
  this.stats_obj = null;
  if (args) {
    if (args.stats_obj !== undefined && args.stats_obj !== null) {
      this.stats_obj = new ttypes.ColumnStatistics(args.stats_obj);
    }
  }
};
ThriftHiveMetastore_update_partition_column_statistics_args.prototype = {};
ThriftHiveMetastore_update_partition_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.stats_obj = new ttypes.ColumnStatistics();
        this.stats_obj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_update_partition_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_partition_column_statistics_args');
  if (this.stats_obj !== null && this.stats_obj !== undefined) {
    output.writeFieldBegin('stats_obj', Thrift.Type.STRUCT, 1);
    this.stats_obj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_update_partition_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_update_partition_column_statistics_result.prototype = {};
ThriftHiveMetastore_update_partition_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidInputException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_update_partition_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_update_partition_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_table_column_statistics_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.col_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.col_name !== undefined && args.col_name !== null) {
      this.col_name = args.col_name;
    }
  }
};
ThriftHiveMetastore_get_table_column_statistics_args.prototype = {};
ThriftHiveMetastore_get_table_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.col_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_column_statistics_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 3);
    output.writeString(this.col_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_table_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ColumnStatistics(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_get_table_column_statistics_result.prototype = {};
ThriftHiveMetastore_get_table_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ColumnStatistics();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.InvalidInputException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidObjectException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_table_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_table_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_column_statistics_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  this.col_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name;
    }
    if (args.col_name !== undefined && args.col_name !== null) {
      this.col_name = args.col_name;
    }
  }
};
ThriftHiveMetastore_get_partition_column_statistics_args.prototype = {};
ThriftHiveMetastore_get_partition_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.col_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_column_statistics_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 4);
    output.writeString(this.col_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_partition_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ColumnStatistics(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_get_partition_column_statistics_result.prototype = {};
ThriftHiveMetastore_get_partition_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ColumnStatistics();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.InvalidInputException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidObjectException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_partition_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_partition_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_delete_partition_column_statistics_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.part_name = null;
  this.col_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.part_name !== undefined && args.part_name !== null) {
      this.part_name = args.part_name;
    }
    if (args.col_name !== undefined && args.col_name !== null) {
      this.col_name = args.col_name;
    }
  }
};
ThriftHiveMetastore_delete_partition_column_statistics_args.prototype = {};
ThriftHiveMetastore_delete_partition_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.col_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_delete_partition_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_partition_column_statistics_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.part_name !== null && this.part_name !== undefined) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3);
    output.writeString(this.part_name);
    output.writeFieldEnd();
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 4);
    output.writeString(this.col_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_delete_partition_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_delete_partition_column_statistics_result.prototype = {};
ThriftHiveMetastore_delete_partition_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.InvalidObjectException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidInputException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_delete_partition_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_partition_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_delete_table_column_statistics_args = function(args) {
  this.db_name = null;
  this.tbl_name = null;
  this.col_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    }
    if (args.tbl_name !== undefined && args.tbl_name !== null) {
      this.tbl_name = args.tbl_name;
    }
    if (args.col_name !== undefined && args.col_name !== null) {
      this.col_name = args.col_name;
    }
  }
};
ThriftHiveMetastore_delete_table_column_statistics_args.prototype = {};
ThriftHiveMetastore_delete_table_column_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.col_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_delete_table_column_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_table_column_statistics_args');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.tbl_name !== null && this.tbl_name !== undefined) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2);
    output.writeString(this.tbl_name);
    output.writeFieldEnd();
  }
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 3);
    output.writeString(this.col_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_delete_table_column_statistics_result = function(args) {
  this.success = null;
  this.o1 = null;
  this.o2 = null;
  this.o3 = null;
  this.o4 = null;
  if (args instanceof ttypes.NoSuchObjectException) {
    this.o1 = args;
    return;
  }
  if (args instanceof ttypes.MetaException) {
    this.o2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidObjectException) {
    this.o3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInputException) {
    this.o4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
    if (args.o2 !== undefined && args.o2 !== null) {
      this.o2 = args.o2;
    }
    if (args.o3 !== undefined && args.o3 !== null) {
      this.o3 = args.o3;
    }
    if (args.o4 !== undefined && args.o4 !== null) {
      this.o4 = args.o4;
    }
  }
};
ThriftHiveMetastore_delete_table_column_statistics_result.prototype = {};
ThriftHiveMetastore_delete_table_column_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException();
        this.o2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.InvalidObjectException();
        this.o3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.InvalidInputException();
        this.o4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_delete_table_column_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_delete_table_column_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  if (this.o2 !== null && this.o2 !== undefined) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2);
    this.o2.write(output);
    output.writeFieldEnd();
  }
  if (this.o3 !== null && this.o3 !== undefined) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3);
    this.o3.write(output);
    output.writeFieldEnd();
  }
  if (this.o4 !== null && this.o4 !== undefined) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4);
    this.o4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_role_args = function(args) {
  this.role = null;
  if (args) {
    if (args.role !== undefined && args.role !== null) {
      this.role = new ttypes.Role(args.role);
    }
  }
};
ThriftHiveMetastore_create_role_args.prototype = {};
ThriftHiveMetastore_create_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.role = new ttypes.Role();
        this.role.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_role_args');
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRUCT, 1);
    this.role.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_create_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_create_role_result.prototype = {};
ThriftHiveMetastore_create_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_create_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_create_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_role_args = function(args) {
  this.role_name = null;
  if (args) {
    if (args.role_name !== undefined && args.role_name !== null) {
      this.role_name = args.role_name;
    }
  }
};
ThriftHiveMetastore_drop_role_args.prototype = {};
ThriftHiveMetastore_drop_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_role_args');
  if (this.role_name !== null && this.role_name !== undefined) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1);
    output.writeString(this.role_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_drop_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_drop_role_result.prototype = {};
ThriftHiveMetastore_drop_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_drop_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_drop_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_role_names_args = function(args) {
};
ThriftHiveMetastore_get_role_names_args.prototype = {};
ThriftHiveMetastore_get_role_names_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_role_names_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_names_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_role_names_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_role_names_result.prototype = {};
ThriftHiveMetastore_get_role_names_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size568 = 0;
        var _rtmp3572;
        this.success = [];
        var _etype571 = 0;
        _rtmp3572 = input.readListBegin();
        _etype571 = _rtmp3572.etype;
        _size568 = _rtmp3572.size;
        for (var _i573 = 0; _i573 < _size568; ++_i573)
        {
          var elem574 = null;
          elem574 = input.readString();
          this.success.push(elem574);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_role_names_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_role_names_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter575 in this.success)
    {
      if (this.success.hasOwnProperty(iter575))
      {
        iter575 = this.success[iter575];
        output.writeString(iter575);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_grant_role_args = function(args) {
  this.role_name = null;
  this.principal_name = null;
  this.principal_type = null;
  this.grantor = null;
  this.grantorType = null;
  this.grant_option = null;
  if (args) {
    if (args.role_name !== undefined && args.role_name !== null) {
      this.role_name = args.role_name;
    }
    if (args.principal_name !== undefined && args.principal_name !== null) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined && args.principal_type !== null) {
      this.principal_type = args.principal_type;
    }
    if (args.grantor !== undefined && args.grantor !== null) {
      this.grantor = args.grantor;
    }
    if (args.grantorType !== undefined && args.grantorType !== null) {
      this.grantorType = args.grantorType;
    }
    if (args.grant_option !== undefined && args.grant_option !== null) {
      this.grant_option = args.grant_option;
    }
  }
};
ThriftHiveMetastore_grant_role_args.prototype = {};
ThriftHiveMetastore_grant_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.grant_option = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_role_args');
  if (this.role_name !== null && this.role_name !== undefined) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1);
    output.writeString(this.role_name);
    output.writeFieldEnd();
  }
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 2);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 3);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  if (this.grantor !== null && this.grantor !== undefined) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 4);
    output.writeString(this.grantor);
    output.writeFieldEnd();
  }
  if (this.grantorType !== null && this.grantorType !== undefined) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 5);
    output.writeI32(this.grantorType);
    output.writeFieldEnd();
  }
  if (this.grant_option !== null && this.grant_option !== undefined) {
    output.writeFieldBegin('grant_option', Thrift.Type.BOOL, 6);
    output.writeBool(this.grant_option);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_grant_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_grant_role_result.prototype = {};
ThriftHiveMetastore_grant_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_revoke_role_args = function(args) {
  this.role_name = null;
  this.principal_name = null;
  this.principal_type = null;
  if (args) {
    if (args.role_name !== undefined && args.role_name !== null) {
      this.role_name = args.role_name;
    }
    if (args.principal_name !== undefined && args.principal_name !== null) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined && args.principal_type !== null) {
      this.principal_type = args.principal_type;
    }
  }
};
ThriftHiveMetastore_revoke_role_args.prototype = {};
ThriftHiveMetastore_revoke_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_role_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_role_args');
  if (this.role_name !== null && this.role_name !== undefined) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1);
    output.writeString(this.role_name);
    output.writeFieldEnd();
  }
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 2);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 3);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_revoke_role_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_revoke_role_result.prototype = {};
ThriftHiveMetastore_revoke_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_role_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_list_roles_args = function(args) {
  this.principal_name = null;
  this.principal_type = null;
  if (args) {
    if (args.principal_name !== undefined && args.principal_name !== null) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined && args.principal_type !== null) {
      this.principal_type = args.principal_type;
    }
  }
};
ThriftHiveMetastore_list_roles_args.prototype = {};
ThriftHiveMetastore_list_roles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_roles_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_roles_args');
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_list_roles_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Role]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_list_roles_result.prototype = {};
ThriftHiveMetastore_list_roles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size576 = 0;
        var _rtmp3580;
        this.success = [];
        var _etype579 = 0;
        _rtmp3580 = input.readListBegin();
        _etype579 = _rtmp3580.etype;
        _size576 = _rtmp3580.size;
        for (var _i581 = 0; _i581 < _size576; ++_i581)
        {
          var elem582 = null;
          elem582 = new ttypes.Role();
          elem582.read(input);
          this.success.push(elem582);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_roles_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_roles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter583 in this.success)
    {
      if (this.success.hasOwnProperty(iter583))
      {
        iter583 = this.success[iter583];
        iter583.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_privilege_set_args = function(args) {
  this.hiveObject = null;
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.hiveObject !== undefined && args.hiveObject !== null) {
      this.hiveObject = new ttypes.HiveObjectRef(args.hiveObject);
    }
    if (args.user_name !== undefined && args.user_name !== null) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined && args.group_names !== null) {
      this.group_names = Thrift.copyList(args.group_names, [null]);
    }
  }
};
ThriftHiveMetastore_get_privilege_set_args.prototype = {};
ThriftHiveMetastore_get_privilege_set_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef();
        this.hiveObject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size584 = 0;
        var _rtmp3588;
        this.group_names = [];
        var _etype587 = 0;
        _rtmp3588 = input.readListBegin();
        _etype587 = _rtmp3588.etype;
        _size584 = _rtmp3588.size;
        for (var _i589 = 0; _i589 < _size584; ++_i589)
        {
          var elem590 = null;
          elem590 = input.readString();
          this.group_names.push(elem590);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_privilege_set_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_privilege_set_args');
  if (this.hiveObject !== null && this.hiveObject !== undefined) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 1);
    this.hiveObject.write(output);
    output.writeFieldEnd();
  }
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 2);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter591 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter591))
      {
        iter591 = this.group_names[iter591];
        output.writeString(iter591);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_privilege_set_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PrincipalPrivilegeSet(args.success);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_privilege_set_result.prototype = {};
ThriftHiveMetastore_get_privilege_set_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PrincipalPrivilegeSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_privilege_set_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_privilege_set_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_list_privileges_args = function(args) {
  this.principal_name = null;
  this.principal_type = null;
  this.hiveObject = null;
  if (args) {
    if (args.principal_name !== undefined && args.principal_name !== null) {
      this.principal_name = args.principal_name;
    }
    if (args.principal_type !== undefined && args.principal_type !== null) {
      this.principal_type = args.principal_type;
    }
    if (args.hiveObject !== undefined && args.hiveObject !== null) {
      this.hiveObject = new ttypes.HiveObjectRef(args.hiveObject);
    }
  }
};
ThriftHiveMetastore_list_privileges_args.prototype = {};
ThriftHiveMetastore_list_privileges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef();
        this.hiveObject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_privileges_args');
  if (this.principal_name !== null && this.principal_name !== undefined) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1);
    output.writeString(this.principal_name);
    output.writeFieldEnd();
  }
  if (this.principal_type !== null && this.principal_type !== undefined) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2);
    output.writeI32(this.principal_type);
    output.writeFieldEnd();
  }
  if (this.hiveObject !== null && this.hiveObject !== undefined) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 3);
    this.hiveObject.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_list_privileges_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.HiveObjectPrivilege]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_list_privileges_result.prototype = {};
ThriftHiveMetastore_list_privileges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size592 = 0;
        var _rtmp3596;
        this.success = [];
        var _etype595 = 0;
        _rtmp3596 = input.readListBegin();
        _etype595 = _rtmp3596.etype;
        _size592 = _rtmp3596.size;
        for (var _i597 = 0; _i597 < _size592; ++_i597)
        {
          var elem598 = null;
          elem598 = new ttypes.HiveObjectPrivilege();
          elem598.read(input);
          this.success.push(elem598);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_list_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_list_privileges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter599 in this.success)
    {
      if (this.success.hasOwnProperty(iter599))
      {
        iter599 = this.success[iter599];
        iter599.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_grant_privileges_args = function(args) {
  this.privileges = null;
  if (args) {
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrivilegeBag(args.privileges);
    }
  }
};
ThriftHiveMetastore_grant_privileges_args.prototype = {};
ThriftHiveMetastore_grant_privileges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrivilegeBag();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_privileges_args');
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 1);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_grant_privileges_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_grant_privileges_result.prototype = {};
ThriftHiveMetastore_grant_privileges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_grant_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_grant_privileges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_revoke_privileges_args = function(args) {
  this.privileges = null;
  if (args) {
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrivilegeBag(args.privileges);
    }
  }
};
ThriftHiveMetastore_revoke_privileges_args.prototype = {};
ThriftHiveMetastore_revoke_privileges_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrivilegeBag();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_privileges_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_privileges_args');
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 1);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_revoke_privileges_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_revoke_privileges_result.prototype = {};
ThriftHiveMetastore_revoke_privileges_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_revoke_privileges_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_revoke_privileges_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_set_ugi_args = function(args) {
  this.user_name = null;
  this.group_names = null;
  if (args) {
    if (args.user_name !== undefined && args.user_name !== null) {
      this.user_name = args.user_name;
    }
    if (args.group_names !== undefined && args.group_names !== null) {
      this.group_names = Thrift.copyList(args.group_names, [null]);
    }
  }
};
ThriftHiveMetastore_set_ugi_args.prototype = {};
ThriftHiveMetastore_set_ugi_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size600 = 0;
        var _rtmp3604;
        this.group_names = [];
        var _etype603 = 0;
        _rtmp3604 = input.readListBegin();
        _etype603 = _rtmp3604.etype;
        _size600 = _rtmp3604.size;
        for (var _i605 = 0; _i605 < _size600; ++_i605)
        {
          var elem606 = null;
          elem606 = input.readString();
          this.group_names.push(elem606);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_set_ugi_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_set_ugi_args');
  if (this.user_name !== null && this.user_name !== undefined) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 1);
    output.writeString(this.user_name);
    output.writeFieldEnd();
  }
  if (this.group_names !== null && this.group_names !== undefined) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.group_names.length);
    for (var iter607 in this.group_names)
    {
      if (this.group_names.hasOwnProperty(iter607))
      {
        iter607 = this.group_names[iter607];
        output.writeString(iter607);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_set_ugi_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_set_ugi_result.prototype = {};
ThriftHiveMetastore_set_ugi_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size608 = 0;
        var _rtmp3612;
        this.success = [];
        var _etype611 = 0;
        _rtmp3612 = input.readListBegin();
        _etype611 = _rtmp3612.etype;
        _size608 = _rtmp3612.size;
        for (var _i613 = 0; _i613 < _size608; ++_i613)
        {
          var elem614 = null;
          elem614 = input.readString();
          this.success.push(elem614);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_set_ugi_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_set_ugi_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter615 in this.success)
    {
      if (this.success.hasOwnProperty(iter615))
      {
        iter615 = this.success[iter615];
        output.writeString(iter615);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_delegation_token_args = function(args) {
  this.token_owner = null;
  this.renewer_kerberos_principal_name = null;
  if (args) {
    if (args.token_owner !== undefined && args.token_owner !== null) {
      this.token_owner = args.token_owner;
    }
    if (args.renewer_kerberos_principal_name !== undefined && args.renewer_kerberos_principal_name !== null) {
      this.renewer_kerberos_principal_name = args.renewer_kerberos_principal_name;
    }
  }
};
ThriftHiveMetastore_get_delegation_token_args.prototype = {};
ThriftHiveMetastore_get_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token_owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.renewer_kerberos_principal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_args');
  if (this.token_owner !== null && this.token_owner !== undefined) {
    output.writeFieldBegin('token_owner', Thrift.Type.STRING, 1);
    output.writeString(this.token_owner);
    output.writeFieldEnd();
  }
  if (this.renewer_kerberos_principal_name !== null && this.renewer_kerberos_principal_name !== undefined) {
    output.writeFieldBegin('renewer_kerberos_principal_name', Thrift.Type.STRING, 2);
    output.writeString(this.renewer_kerberos_principal_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_get_delegation_token_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_get_delegation_token_result.prototype = {};
ThriftHiveMetastore_get_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_get_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_renew_delegation_token_args = function(args) {
  this.token_str_form = null;
  if (args) {
    if (args.token_str_form !== undefined && args.token_str_form !== null) {
      this.token_str_form = args.token_str_form;
    }
  }
};
ThriftHiveMetastore_renew_delegation_token_args.prototype = {};
ThriftHiveMetastore_renew_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token_str_form = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_renew_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_renew_delegation_token_args');
  if (this.token_str_form !== null && this.token_str_form !== undefined) {
    output.writeFieldBegin('token_str_form', Thrift.Type.STRING, 1);
    output.writeString(this.token_str_form);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_renew_delegation_token_result = function(args) {
  this.success = null;
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_renew_delegation_token_result.prototype = {};
ThriftHiveMetastore_renew_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_renew_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_renew_delegation_token_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_cancel_delegation_token_args = function(args) {
  this.token_str_form = null;
  if (args) {
    if (args.token_str_form !== undefined && args.token_str_form !== null) {
      this.token_str_form = args.token_str_form;
    }
  }
};
ThriftHiveMetastore_cancel_delegation_token_args.prototype = {};
ThriftHiveMetastore_cancel_delegation_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token_str_form = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_cancel_delegation_token_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_cancel_delegation_token_args');
  if (this.token_str_form !== null && this.token_str_form !== undefined) {
    output.writeFieldBegin('token_str_form', Thrift.Type.STRING, 1);
    output.writeString(this.token_str_form);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastore_cancel_delegation_token_result = function(args) {
  this.o1 = null;
  if (args instanceof ttypes.MetaException) {
    this.o1 = args;
    return;
  }
  if (args) {
    if (args.o1 !== undefined && args.o1 !== null) {
      this.o1 = args.o1;
    }
  }
};
ThriftHiveMetastore_cancel_delegation_token_result.prototype = {};
ThriftHiveMetastore_cancel_delegation_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException();
        this.o1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftHiveMetastore_cancel_delegation_token_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftHiveMetastore_cancel_delegation_token_result');
  if (this.o1 !== null && this.o1 !== undefined) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1);
    this.o1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftHiveMetastoreClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(ThriftHiveMetastoreClient, FacebookServiceClient);
ThriftHiveMetastoreClient.prototype.seqid = function() { return this._seqid; };
ThriftHiveMetastoreClient.prototype.new_seqid = function() { return this._seqid += 1; };
ThriftHiveMetastoreClient.prototype.create_database = function(database, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_database(database);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_database(database);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_database = function(database) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_database', Thrift.MessageType.CALL, this.seqid());
  var params = {
    database: database
  };
  var args = new ThriftHiveMetastore_create_database_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.get_database = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_database(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_database(name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_database = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_database', Thrift.MessageType.CALL, this.seqid());
  var params = {
    name: name
  };
  var args = new ThriftHiveMetastore_get_database_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_database failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_database = function(name, deleteData, cascade, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_database(name, deleteData, cascade);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_database(name, deleteData, cascade);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_database = function(name, deleteData, cascade) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_database', Thrift.MessageType.CALL, this.seqid());
  var params = {
    name: name,
    deleteData: deleteData,
    cascade: cascade
  };
  var args = new ThriftHiveMetastore_drop_database_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.get_databases = function(pattern, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_databases(pattern);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_databases(pattern);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_databases = function(pattern) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid());
  var params = {
    pattern: pattern
  };
  var args = new ThriftHiveMetastore_get_databases_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_databases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_databases failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_all_databases = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_databases();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_databases();
  }
};

ThriftHiveMetastoreClient.prototype.send_get_all_databases = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_databases', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_all_databases_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_all_databases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_all_databases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_databases failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_database = function(dbname, db, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_database(dbname, db);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_database(dbname, db);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_database = function(dbname, db) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_database', Thrift.MessageType.CALL, this.seqid());
  var params = {
    dbname: dbname,
    db: db
  };
  var args = new ThriftHiveMetastore_alter_database_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_database = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_database_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.get_type = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_type(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_type(name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_type = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_type', Thrift.MessageType.CALL, this.seqid());
  var params = {
    name: name
  };
  var args = new ThriftHiveMetastore_get_type_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_type failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.create_type = function(type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_type(type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_type(type);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_type = function(type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_type', Thrift.MessageType.CALL, this.seqid());
  var params = {
    type: type
  };
  var args = new ThriftHiveMetastore_create_type_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_type failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_type = function(type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_type(type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_type(type);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_type = function(type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_type', Thrift.MessageType.CALL, this.seqid());
  var params = {
    type: type
  };
  var args = new ThriftHiveMetastore_drop_type_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_type failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_type_all = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_type_all(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_type_all(name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_type_all = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_type_all', Thrift.MessageType.CALL, this.seqid());
  var params = {
    name: name
  };
  var args = new ThriftHiveMetastore_get_type_all_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_type_all = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_type_all_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_type_all failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_fields = function(db_name, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_fields(db_name, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_fields(db_name, table_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_fields = function(db_name, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_fields', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    table_name: table_name
  };
  var args = new ThriftHiveMetastore_get_fields_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_fields = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_fields_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_fields failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_schema = function(db_name, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_schema(db_name, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_schema(db_name, table_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_schema = function(db_name, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_schema', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    table_name: table_name
  };
  var args = new ThriftHiveMetastore_get_schema_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_schema = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_schema_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_schema failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.create_table = function(tbl, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_table(tbl);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_table(tbl);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_table = function(tbl) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid());
  var params = {
    tbl: tbl
  };
  var args = new ThriftHiveMetastore_create_table_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.create_table_with_environment_context = function(tbl, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_table_with_environment_context(tbl, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_table_with_environment_context(tbl, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_table_with_environment_context = function(tbl, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_table_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var params = {
    tbl: tbl,
    environment_context: environment_context
  };
  var args = new ThriftHiveMetastore_create_table_with_environment_context_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_table_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_table_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.drop_table = function(dbname, name, deleteData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_table(dbname, name, deleteData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_table(dbname, name, deleteData);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_table = function(dbname, name, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_table', Thrift.MessageType.CALL, this.seqid());
  var params = {
    dbname: dbname,
    name: name,
    deleteData: deleteData
  };
  var args = new ThriftHiveMetastore_drop_table_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.get_tables = function(db_name, pattern, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_tables(db_name, pattern);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_tables(db_name, pattern);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_tables = function(db_name, pattern) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    pattern: pattern
  };
  var args = new ThriftHiveMetastore_get_tables_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tables failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_all_tables = function(db_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_tables(db_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_tables(db_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_all_tables = function(db_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_tables', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name
  };
  var args = new ThriftHiveMetastore_get_all_tables_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_all_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_all_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_tables failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_table = function(dbname, tbl_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table(dbname, tbl_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table(dbname, tbl_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_table = function(dbname, tbl_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table', Thrift.MessageType.CALL, this.seqid());
  var params = {
    dbname: dbname,
    tbl_name: tbl_name
  };
  var args = new ThriftHiveMetastore_get_table_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_table_objects_by_name = function(dbname, tbl_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_objects_by_name(dbname, tbl_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_objects_by_name(dbname, tbl_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_table_objects_by_name = function(dbname, tbl_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_objects_by_name', Thrift.MessageType.CALL, this.seqid());
  var params = {
    dbname: dbname,
    tbl_names: tbl_names
  };
  var args = new ThriftHiveMetastore_get_table_objects_by_name_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_table_objects_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_objects_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_objects_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_table_names_by_filter = function(dbname, filter, max_tables, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_names_by_filter(dbname, filter, max_tables);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_names_by_filter(dbname, filter, max_tables);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_table_names_by_filter = function(dbname, filter, max_tables) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_names_by_filter', Thrift.MessageType.CALL, this.seqid());
  var params = {
    dbname: dbname,
    filter: filter,
    max_tables: max_tables
  };
  var args = new ThriftHiveMetastore_get_table_names_by_filter_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_table_names_by_filter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_names_by_filter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_names_by_filter failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_table = function(dbname, tbl_name, new_tbl, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_table(dbname, tbl_name, new_tbl);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_table(dbname, tbl_name, new_tbl);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_table = function(dbname, tbl_name, new_tbl) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_table', Thrift.MessageType.CALL, this.seqid());
  var params = {
    dbname: dbname,
    tbl_name: tbl_name,
    new_tbl: new_tbl
  };
  var args = new ThriftHiveMetastore_alter_table_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.alter_table_with_environment_context = function(dbname, tbl_name, new_tbl, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_table_with_environment_context = function(dbname, tbl_name, new_tbl, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_table_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var params = {
    dbname: dbname,
    tbl_name: tbl_name,
    new_tbl: new_tbl,
    environment_context: environment_context
  };
  var args = new ThriftHiveMetastore_alter_table_with_environment_context_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_table_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_table_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.add_partition = function(new_part, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_partition(new_part);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_partition(new_part);
  }
};

ThriftHiveMetastoreClient.prototype.send_add_partition = function(new_part) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partition', Thrift.MessageType.CALL, this.seqid());
  var params = {
    new_part: new_part
  };
  var args = new ThriftHiveMetastore_add_partition_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.add_partition_with_environment_context = function(new_part, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_partition_with_environment_context(new_part, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_partition_with_environment_context(new_part, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_add_partition_with_environment_context = function(new_part, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partition_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var params = {
    new_part: new_part,
    environment_context: environment_context
  };
  var args = new ThriftHiveMetastore_add_partition_with_environment_context_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_partition_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partition_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_partition_with_environment_context failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.add_partitions = function(new_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_partitions(new_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_partitions(new_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_add_partitions = function(new_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partitions', Thrift.MessageType.CALL, this.seqid());
  var params = {
    new_parts: new_parts
  };
  var args = new ThriftHiveMetastore_add_partitions_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partitions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_partitions failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.append_partition = function(db_name, tbl_name, part_vals, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_append_partition(db_name, tbl_name, part_vals);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_append_partition(db_name, tbl_name, part_vals);
  }
};

ThriftHiveMetastoreClient.prototype.send_append_partition = function(db_name, tbl_name, part_vals) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_vals: part_vals
  };
  var args = new ThriftHiveMetastore_append_partition_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_append_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.append_partition_by_name = function(db_name, tbl_name, part_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_append_partition_by_name(db_name, tbl_name, part_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_append_partition_by_name(db_name, tbl_name, part_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_append_partition_by_name = function(db_name, tbl_name, part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_name: part_name
  };
  var args = new ThriftHiveMetastore_append_partition_by_name_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_append_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append_partition_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_partition = function(db_name, tbl_name, part_vals, deleteData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_partition(db_name, tbl_name, part_vals, deleteData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_partition(db_name, tbl_name, part_vals, deleteData);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_partition = function(db_name, tbl_name, part_vals, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_vals: part_vals,
    deleteData: deleteData
  };
  var args = new ThriftHiveMetastore_drop_partition_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_partition_by_name = function(db_name, tbl_name, part_name, deleteData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_partition_by_name = function(db_name, tbl_name, part_name, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_name: part_name,
    deleteData: deleteData
  };
  var args = new ThriftHiveMetastore_drop_partition_by_name_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_partition_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition = function(db_name, tbl_name, part_vals, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition(db_name, tbl_name, part_vals);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition(db_name, tbl_name, part_vals);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition = function(db_name, tbl_name, part_vals) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_vals: part_vals
  };
  var args = new ThriftHiveMetastore_get_partition_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_with_auth = function(db_name, tbl_name, part_vals, user_name, group_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition_with_auth = function(db_name, tbl_name, part_vals, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_with_auth', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_vals: part_vals,
    user_name: user_name,
    group_names: group_names
  };
  var args = new ThriftHiveMetastore_get_partition_with_auth_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_with_auth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_with_auth failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_by_name = function(db_name, tbl_name, part_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition_by_name(db_name, tbl_name, part_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition_by_name(db_name, tbl_name, part_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition_by_name = function(db_name, tbl_name, part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_name: part_name
  };
  var args = new ThriftHiveMetastore_get_partition_by_name_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions = function(db_name, tbl_name, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions(db_name, tbl_name, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions(db_name, tbl_name, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions = function(db_name, tbl_name, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    max_parts: max_parts
  };
  var args = new ThriftHiveMetastore_get_partitions_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_with_auth = function(db_name, tbl_name, max_parts, user_name, group_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_with_auth = function(db_name, tbl_name, max_parts, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_with_auth', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    max_parts: max_parts,
    user_name: user_name,
    group_names: group_names
  };
  var args = new ThriftHiveMetastore_get_partitions_with_auth_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_with_auth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_with_auth failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_names = function(db_name, tbl_name, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition_names(db_name, tbl_name, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition_names(db_name, tbl_name, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition_names = function(db_name, tbl_name, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_names', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    max_parts: max_parts
  };
  var args = new ThriftHiveMetastore_get_partition_names_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_ps = function(db_name, tbl_name, part_vals, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps = function(db_name, tbl_name, part_vals, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_vals: part_vals,
    max_parts: max_parts
  };
  var args = new ThriftHiveMetastore_get_partitions_ps_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_ps failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_ps_with_auth = function(db_name, tbl_name, part_vals, max_parts, user_name, group_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps_with_auth = function(db_name, tbl_name, part_vals, max_parts, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_ps_with_auth', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_vals: part_vals,
    max_parts: max_parts,
    user_name: user_name,
    group_names: group_names
  };
  var args = new ThriftHiveMetastore_get_partitions_ps_with_auth_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps_with_auth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_ps_with_auth failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_names_ps = function(db_name, tbl_name, part_vals, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition_names_ps = function(db_name, tbl_name, part_vals, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_vals: part_vals,
    max_parts: max_parts
  };
  var args = new ThriftHiveMetastore_get_partition_names_ps_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_names_ps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_names_ps_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_names_ps failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_by_filter = function(db_name, tbl_name, filter, max_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_by_filter = function(db_name, tbl_name, filter, max_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_by_filter', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    filter: filter,
    max_parts: max_parts
  };
  var args = new ThriftHiveMetastore_get_partitions_by_filter_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_by_filter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_by_filter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_by_filter failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partitions_by_names = function(db_name, tbl_name, names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partitions_by_names(db_name, tbl_name, names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partitions_by_names(db_name, tbl_name, names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partitions_by_names = function(db_name, tbl_name, names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_by_names', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    names: names
  };
  var args = new ThriftHiveMetastore_get_partitions_by_names_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partitions_by_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_by_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partitions_by_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_partition = function(db_name, tbl_name, new_part, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_partition(db_name, tbl_name, new_part);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_partition(db_name, tbl_name, new_part);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_partition = function(db_name, tbl_name, new_part) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_partition', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    new_part: new_part
  };
  var args = new ThriftHiveMetastore_alter_partition_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.alter_partitions = function(db_name, tbl_name, new_parts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_partitions(db_name, tbl_name, new_parts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_partitions(db_name, tbl_name, new_parts);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_partitions = function(db_name, tbl_name, new_parts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_partitions', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    new_parts: new_parts
  };
  var args = new ThriftHiveMetastore_alter_partitions_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_partitions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_partitions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.alter_partition_with_environment_context = function(db_name, tbl_name, new_part, environment_context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_partition_with_environment_context = function(db_name, tbl_name, new_part, environment_context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_partition_with_environment_context', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    new_part: new_part,
    environment_context: environment_context
  };
  var args = new ThriftHiveMetastore_alter_partition_with_environment_context_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_partition_with_environment_context = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_partition_with_environment_context_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.rename_partition = function(db_name, tbl_name, part_vals, new_part, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rename_partition(db_name, tbl_name, part_vals, new_part);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rename_partition(db_name, tbl_name, part_vals, new_part);
  }
};

ThriftHiveMetastoreClient.prototype.send_rename_partition = function(db_name, tbl_name, part_vals, new_part) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rename_partition', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_vals: part_vals,
    new_part: new_part
  };
  var args = new ThriftHiveMetastore_rename_partition_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_rename_partition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_rename_partition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.get_config_value = function(name, defaultValue, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_config_value(name, defaultValue);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_config_value(name, defaultValue);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_config_value = function(name, defaultValue) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_config_value', Thrift.MessageType.CALL, this.seqid());
  var params = {
    name: name,
    defaultValue: defaultValue
  };
  var args = new ThriftHiveMetastore_get_config_value_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_config_value = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_config_value_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_config_value failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.partition_name_to_vals = function(part_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_partition_name_to_vals(part_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_partition_name_to_vals(part_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_partition_name_to_vals = function(part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.CALL, this.seqid());
  var params = {
    part_name: part_name
  };
  var args = new ThriftHiveMetastore_partition_name_to_vals_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_vals = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_to_vals_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('partition_name_to_vals failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.partition_name_to_spec = function(part_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_partition_name_to_spec(part_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_partition_name_to_spec(part_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_partition_name_to_spec = function(part_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.CALL, this.seqid());
  var params = {
    part_name: part_name
  };
  var args = new ThriftHiveMetastore_partition_name_to_spec_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_spec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_to_spec_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('partition_name_to_spec failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.markPartitionForEvent = function(db_name, tbl_name, part_vals, eventType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType);
  }
};

ThriftHiveMetastoreClient.prototype.send_markPartitionForEvent = function(db_name, tbl_name, part_vals, eventType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('markPartitionForEvent', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_vals: part_vals,
    eventType: eventType
  };
  var args = new ThriftHiveMetastore_markPartitionForEvent_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_markPartitionForEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_markPartitionForEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.o5) {
    return callback(result.o5);
  }
  if (null !== result.o6) {
    return callback(result.o6);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.isPartitionMarkedForEvent = function(db_name, tbl_name, part_vals, eventType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType);
  }
};

ThriftHiveMetastoreClient.prototype.send_isPartitionMarkedForEvent = function(db_name, tbl_name, part_vals, eventType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isPartitionMarkedForEvent', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_vals: part_vals,
    eventType: eventType
  };
  var args = new ThriftHiveMetastore_isPartitionMarkedForEvent_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_isPartitionMarkedForEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_isPartitionMarkedForEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.o5) {
    return callback(result.o5);
  }
  if (null !== result.o6) {
    return callback(result.o6);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isPartitionMarkedForEvent failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.add_index = function(new_index, index_table, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_index(new_index, index_table);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_index(new_index, index_table);
  }
};

ThriftHiveMetastoreClient.prototype.send_add_index = function(new_index, index_table) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_index', Thrift.MessageType.CALL, this.seqid());
  var params = {
    new_index: new_index,
    index_table: index_table
  };
  var args = new ThriftHiveMetastore_add_index_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_add_index = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_index_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_index failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.alter_index = function(dbname, base_tbl_name, idx_name, new_idx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alter_index(dbname, base_tbl_name, idx_name, new_idx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alter_index(dbname, base_tbl_name, idx_name, new_idx);
  }
};

ThriftHiveMetastoreClient.prototype.send_alter_index = function(dbname, base_tbl_name, idx_name, new_idx) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_index', Thrift.MessageType.CALL, this.seqid());
  var params = {
    dbname: dbname,
    base_tbl_name: base_tbl_name,
    idx_name: idx_name,
    new_idx: new_idx
  };
  var args = new ThriftHiveMetastore_alter_index_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_alter_index = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_index_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  callback(null);
};
ThriftHiveMetastoreClient.prototype.drop_index_by_name = function(db_name, tbl_name, index_name, deleteData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_index_by_name(db_name, tbl_name, index_name, deleteData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_index_by_name(db_name, tbl_name, index_name, deleteData);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_index_by_name = function(db_name, tbl_name, index_name, deleteData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_index_by_name', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    index_name: index_name,
    deleteData: deleteData
  };
  var args = new ThriftHiveMetastore_drop_index_by_name_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_index_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_index_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_index_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_index_by_name = function(db_name, tbl_name, index_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_index_by_name(db_name, tbl_name, index_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_index_by_name(db_name, tbl_name, index_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_index_by_name = function(db_name, tbl_name, index_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_index_by_name', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    index_name: index_name
  };
  var args = new ThriftHiveMetastore_get_index_by_name_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_index_by_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_index_by_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_index_by_name failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_indexes = function(db_name, tbl_name, max_indexes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_indexes(db_name, tbl_name, max_indexes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_indexes(db_name, tbl_name, max_indexes);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_indexes = function(db_name, tbl_name, max_indexes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_indexes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    max_indexes: max_indexes
  };
  var args = new ThriftHiveMetastore_get_indexes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_indexes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_indexes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_indexes failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_index_names = function(db_name, tbl_name, max_indexes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_index_names(db_name, tbl_name, max_indexes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_index_names(db_name, tbl_name, max_indexes);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_index_names = function(db_name, tbl_name, max_indexes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_index_names', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    max_indexes: max_indexes
  };
  var args = new ThriftHiveMetastore_get_index_names_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_index_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_index_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_index_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.update_table_column_statistics = function(stats_obj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_table_column_statistics(stats_obj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_table_column_statistics(stats_obj);
  }
};

ThriftHiveMetastoreClient.prototype.send_update_table_column_statistics = function(stats_obj) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update_table_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var params = {
    stats_obj: stats_obj
  };
  var args = new ThriftHiveMetastore_update_table_column_statistics_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_update_table_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_update_table_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_table_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.update_partition_column_statistics = function(stats_obj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_partition_column_statistics(stats_obj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_partition_column_statistics(stats_obj);
  }
};

ThriftHiveMetastoreClient.prototype.send_update_partition_column_statistics = function(stats_obj) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update_partition_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var params = {
    stats_obj: stats_obj
  };
  var args = new ThriftHiveMetastore_update_partition_column_statistics_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_update_partition_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_update_partition_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_partition_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_table_column_statistics = function(db_name, tbl_name, col_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_column_statistics(db_name, tbl_name, col_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_column_statistics(db_name, tbl_name, col_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_table_column_statistics = function(db_name, tbl_name, col_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    col_name: col_name
  };
  var args = new ThriftHiveMetastore_get_table_column_statistics_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_table_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_partition_column_statistics = function(db_name, tbl_name, part_name, col_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_partition_column_statistics = function(db_name, tbl_name, part_name, col_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_name: part_name,
    col_name: col_name
  };
  var args = new ThriftHiveMetastore_get_partition_column_statistics_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_partition_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_partition_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.delete_partition_column_statistics = function(db_name, tbl_name, part_name, col_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_delete_partition_column_statistics = function(db_name, tbl_name, part_name, col_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete_partition_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    part_name: part_name,
    col_name: col_name
  };
  var args = new ThriftHiveMetastore_delete_partition_column_statistics_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_delete_partition_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_delete_partition_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delete_partition_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.delete_table_column_statistics = function(db_name, tbl_name, col_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_table_column_statistics(db_name, tbl_name, col_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_table_column_statistics(db_name, tbl_name, col_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_delete_table_column_statistics = function(db_name, tbl_name, col_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delete_table_column_statistics', Thrift.MessageType.CALL, this.seqid());
  var params = {
    db_name: db_name,
    tbl_name: tbl_name,
    col_name: col_name
  };
  var args = new ThriftHiveMetastore_delete_table_column_statistics_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_delete_table_column_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_delete_table_column_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.o2) {
    return callback(result.o2);
  }
  if (null !== result.o3) {
    return callback(result.o3);
  }
  if (null !== result.o4) {
    return callback(result.o4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delete_table_column_statistics failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.create_role = function(role, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_role(role);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_role(role);
  }
};

ThriftHiveMetastoreClient.prototype.send_create_role = function(role) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_role', Thrift.MessageType.CALL, this.seqid());
  var params = {
    role: role
  };
  var args = new ThriftHiveMetastore_create_role_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_create_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.drop_role = function(role_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_role(role_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_role(role_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_drop_role = function(role_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_role', Thrift.MessageType.CALL, this.seqid());
  var params = {
    role_name: role_name
  };
  var args = new ThriftHiveMetastore_drop_role_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_drop_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('drop_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_role_names = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_role_names();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_role_names();
  }
};

ThriftHiveMetastoreClient.prototype.send_get_role_names = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_role_names', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftHiveMetastore_get_role_names_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_role_names = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_role_names_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_role_names failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.grant_role = function(role_name, principal_name, principal_type, grantor, grantorType, grant_option, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option);
  }
};

ThriftHiveMetastoreClient.prototype.send_grant_role = function(role_name, principal_name, principal_type, grantor, grantorType, grant_option) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grant_role', Thrift.MessageType.CALL, this.seqid());
  var params = {
    role_name: role_name,
    principal_name: principal_name,
    principal_type: principal_type,
    grantor: grantor,
    grantorType: grantorType,
    grant_option: grant_option
  };
  var args = new ThriftHiveMetastore_grant_role_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_grant_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_grant_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('grant_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.revoke_role = function(role_name, principal_name, principal_type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_revoke_role(role_name, principal_name, principal_type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_revoke_role(role_name, principal_name, principal_type);
  }
};

ThriftHiveMetastoreClient.prototype.send_revoke_role = function(role_name, principal_name, principal_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revoke_role', Thrift.MessageType.CALL, this.seqid());
  var params = {
    role_name: role_name,
    principal_name: principal_name,
    principal_type: principal_type
  };
  var args = new ThriftHiveMetastore_revoke_role_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_revoke_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_revoke_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('revoke_role failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.list_roles = function(principal_name, principal_type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_list_roles(principal_name, principal_type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_list_roles(principal_name, principal_type);
  }
};

ThriftHiveMetastoreClient.prototype.send_list_roles = function(principal_name, principal_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('list_roles', Thrift.MessageType.CALL, this.seqid());
  var params = {
    principal_name: principal_name,
    principal_type: principal_type
  };
  var args = new ThriftHiveMetastore_list_roles_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_list_roles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_list_roles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('list_roles failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_privilege_set = function(hiveObject, user_name, group_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_privilege_set(hiveObject, user_name, group_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_privilege_set(hiveObject, user_name, group_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_privilege_set = function(hiveObject, user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_privilege_set', Thrift.MessageType.CALL, this.seqid());
  var params = {
    hiveObject: hiveObject,
    user_name: user_name,
    group_names: group_names
  };
  var args = new ThriftHiveMetastore_get_privilege_set_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_privilege_set = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_privilege_set_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_privilege_set failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.list_privileges = function(principal_name, principal_type, hiveObject, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_list_privileges(principal_name, principal_type, hiveObject);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_list_privileges(principal_name, principal_type, hiveObject);
  }
};

ThriftHiveMetastoreClient.prototype.send_list_privileges = function(principal_name, principal_type, hiveObject) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('list_privileges', Thrift.MessageType.CALL, this.seqid());
  var params = {
    principal_name: principal_name,
    principal_type: principal_type,
    hiveObject: hiveObject
  };
  var args = new ThriftHiveMetastore_list_privileges_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_list_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_list_privileges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('list_privileges failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.grant_privileges = function(privileges, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_grant_privileges(privileges);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_grant_privileges(privileges);
  }
};

ThriftHiveMetastoreClient.prototype.send_grant_privileges = function(privileges) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grant_privileges', Thrift.MessageType.CALL, this.seqid());
  var params = {
    privileges: privileges
  };
  var args = new ThriftHiveMetastore_grant_privileges_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_grant_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_grant_privileges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('grant_privileges failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.revoke_privileges = function(privileges, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_revoke_privileges(privileges);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_revoke_privileges(privileges);
  }
};

ThriftHiveMetastoreClient.prototype.send_revoke_privileges = function(privileges) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revoke_privileges', Thrift.MessageType.CALL, this.seqid());
  var params = {
    privileges: privileges
  };
  var args = new ThriftHiveMetastore_revoke_privileges_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_revoke_privileges = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_revoke_privileges_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('revoke_privileges failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.set_ugi = function(user_name, group_names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_ugi(user_name, group_names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_ugi(user_name, group_names);
  }
};

ThriftHiveMetastoreClient.prototype.send_set_ugi = function(user_name, group_names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_ugi', Thrift.MessageType.CALL, this.seqid());
  var params = {
    user_name: user_name,
    group_names: group_names
  };
  var args = new ThriftHiveMetastore_set_ugi_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_set_ugi = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_set_ugi_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('set_ugi failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.get_delegation_token = function(token_owner, renewer_kerberos_principal_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_delegation_token(token_owner, renewer_kerberos_principal_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_delegation_token(token_owner, renewer_kerberos_principal_name);
  }
};

ThriftHiveMetastoreClient.prototype.send_get_delegation_token = function(token_owner, renewer_kerberos_principal_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_delegation_token', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token_owner: token_owner,
    renewer_kerberos_principal_name: renewer_kerberos_principal_name
  };
  var args = new ThriftHiveMetastore_get_delegation_token_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_get_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_delegation_token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_delegation_token failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.renew_delegation_token = function(token_str_form, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_renew_delegation_token(token_str_form);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_renew_delegation_token(token_str_form);
  }
};

ThriftHiveMetastoreClient.prototype.send_renew_delegation_token = function(token_str_form) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('renew_delegation_token', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token_str_form: token_str_form
  };
  var args = new ThriftHiveMetastore_renew_delegation_token_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_renew_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_renew_delegation_token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('renew_delegation_token failed: unknown result');
};
ThriftHiveMetastoreClient.prototype.cancel_delegation_token = function(token_str_form, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancel_delegation_token(token_str_form);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancel_delegation_token(token_str_form);
  }
};

ThriftHiveMetastoreClient.prototype.send_cancel_delegation_token = function(token_str_form) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancel_delegation_token', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token_str_form: token_str_form
  };
  var args = new ThriftHiveMetastore_cancel_delegation_token_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftHiveMetastoreClient.prototype.recv_cancel_delegation_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftHiveMetastore_cancel_delegation_token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.o1) {
    return callback(result.o1);
  }
  callback(null);
};
var ThriftHiveMetastoreProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(ThriftHiveMetastoreProcessor, FacebookServiceProcessor);
ThriftHiveMetastoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ThriftHiveMetastoreProcessor.prototype.process_create_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_database_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_database.length === 1) {
    Q.fcall(this._handler.create_database.bind(this._handler), args.database)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_create_database_result({success: result});
        output.writeMessageBegin("create_database", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_create_database_result(err);
          output.writeMessageBegin("create_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_database(args.database, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_create_database_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_database", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_database", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_database_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_database.length === 1) {
    Q.fcall(this._handler.get_database.bind(this._handler), args.name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_database_result({success: result});
        output.writeMessageBegin("get_database", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_database_result(err);
          output.writeMessageBegin("get_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_database(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_database_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_database", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_database", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_drop_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_database_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_database.length === 3) {
    Q.fcall(this._handler.drop_database.bind(this._handler), args.name, args.deleteData, args.cascade)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_drop_database_result({success: result});
        output.writeMessageBegin("drop_database", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_drop_database_result(err);
          output.writeMessageBegin("drop_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("drop_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_database(args.name, args.deleteData, args.cascade, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_drop_database_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("drop_database", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_database", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_databases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_databases.length === 1) {
    Q.fcall(this._handler.get_databases.bind(this._handler), args.pattern)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_databases_result({success: result});
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_databases_result(err);
          output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_databases", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_databases(args.pattern, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_databases_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_databases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_all_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_databases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_databases.length === 0) {
    Q.fcall(this._handler.get_all_databases.bind(this._handler))
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_all_databases_result({success: result});
        output.writeMessageBegin("get_all_databases", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_all_databases_result(err);
          output.writeMessageBegin("get_all_databases", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_all_databases", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_all_databases(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_all_databases_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_databases", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_databases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_alter_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_database_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_database.length === 2) {
    Q.fcall(this._handler.alter_database.bind(this._handler), args.dbname, args.db)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_alter_database_result({success: result});
        output.writeMessageBegin("alter_database", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_alter_database_result(err);
          output.writeMessageBegin("alter_database", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("alter_database", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_database(args.dbname, args.db, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_alter_database_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("alter_database", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("alter_database", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_type.length === 1) {
    Q.fcall(this._handler.get_type.bind(this._handler), args.name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_type_result({success: result});
        output.writeMessageBegin("get_type", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_get_type_result(err);
          output.writeMessageBegin("get_type", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_type", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_type(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_get_type_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_create_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_type.length === 1) {
    Q.fcall(this._handler.create_type.bind(this._handler), args.type)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_create_type_result({success: result});
        output.writeMessageBegin("create_type", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_create_type_result(err);
          output.writeMessageBegin("create_type", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_type", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_type(args.type, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_create_type_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_drop_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_type.length === 1) {
    Q.fcall(this._handler.drop_type.bind(this._handler), args.type)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_drop_type_result({success: result});
        output.writeMessageBegin("drop_type", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_drop_type_result(err);
          output.writeMessageBegin("drop_type", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("drop_type", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_type(args.type, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_drop_type_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("drop_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_type_all = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_all_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_type_all.length === 1) {
    Q.fcall(this._handler.get_type_all.bind(this._handler), args.name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_type_all_result({success: result});
        output.writeMessageBegin("get_type_all", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_type_all_result(err);
          output.writeMessageBegin("get_type_all", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_type_all", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_type_all(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_type_all_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_type_all", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_type_all", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_fields = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_fields_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_fields.length === 2) {
    Q.fcall(this._handler.get_fields.bind(this._handler), args.db_name, args.table_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_fields_result({success: result});
        output.writeMessageBegin("get_fields", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
          result = new ThriftHiveMetastore_get_fields_result(err);
          output.writeMessageBegin("get_fields", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_fields", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_fields(args.db_name, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
        result_obj = new ThriftHiveMetastore_get_fields_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_fields", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_fields", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_schema = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_schema_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_schema.length === 2) {
    Q.fcall(this._handler.get_schema.bind(this._handler), args.db_name, args.table_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_schema_result({success: result});
        output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
          result = new ThriftHiveMetastore_get_schema_result(err);
          output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_schema", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_schema(args.db_name, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownDBException) {
        result_obj = new ThriftHiveMetastore_get_schema_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_schema", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_create_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_table.length === 1) {
    Q.fcall(this._handler.create_table.bind(this._handler), args.tbl)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_create_table_result({success: result});
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_create_table_result(err);
          output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_table(args.tbl, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_create_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_create_table_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_table_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_table_with_environment_context.length === 2) {
    Q.fcall(this._handler.create_table_with_environment_context.bind(this._handler), args.tbl, args.environment_context)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_create_table_with_environment_context_result({success: result});
        output.writeMessageBegin("create_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_create_table_with_environment_context_result(err);
          output.writeMessageBegin("create_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_table_with_environment_context", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_table_with_environment_context(args.tbl, args.environment_context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_create_table_with_environment_context_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_table_with_environment_context", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_drop_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_table.length === 3) {
    Q.fcall(this._handler.drop_table.bind(this._handler), args.dbname, args.name, args.deleteData)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_drop_table_result({success: result});
        output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_drop_table_result(err);
          output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("drop_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_table(args.dbname, args.name, args.deleteData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_drop_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_tables.length === 2) {
    Q.fcall(this._handler.get_tables.bind(this._handler), args.db_name, args.pattern)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_tables_result({success: result});
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_tables_result(err);
          output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_tables(args.db_name, args.pattern, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_tables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_all_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_tables.length === 1) {
    Q.fcall(this._handler.get_all_tables.bind(this._handler), args.db_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_all_tables_result({success: result});
        output.writeMessageBegin("get_all_tables", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_all_tables_result(err);
          output.writeMessageBegin("get_all_tables", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_all_tables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_all_tables(args.db_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_all_tables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table.length === 2) {
    Q.fcall(this._handler.get_table.bind(this._handler), args.dbname, args.tbl_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_table_result({success: result});
        output.writeMessageBegin("get_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_get_table_result(err);
          output.writeMessageBegin("get_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table(args.dbname, args.tbl_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_get_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_table_objects_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_objects_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_objects_by_name.length === 2) {
    Q.fcall(this._handler.get_table_objects_by_name.bind(this._handler), args.dbname, args.tbl_names)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_table_objects_by_name_result({success: result});
        output.writeMessageBegin("get_table_objects_by_name", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.UnknownDBException) {
          result = new ThriftHiveMetastore_get_table_objects_by_name_result(err);
          output.writeMessageBegin("get_table_objects_by_name", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_objects_by_name", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_objects_by_name(args.dbname, args.tbl_names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.UnknownDBException) {
        result_obj = new ThriftHiveMetastore_get_table_objects_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_objects_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_objects_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_table_names_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_names_by_filter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_names_by_filter.length === 3) {
    Q.fcall(this._handler.get_table_names_by_filter.bind(this._handler), args.dbname, args.filter, args.max_tables)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_table_names_by_filter_result({success: result});
        output.writeMessageBegin("get_table_names_by_filter", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.UnknownDBException) {
          result = new ThriftHiveMetastore_get_table_names_by_filter_result(err);
          output.writeMessageBegin("get_table_names_by_filter", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_names_by_filter", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_names_by_filter(args.dbname, args.filter, args.max_tables, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.UnknownDBException) {
        result_obj = new ThriftHiveMetastore_get_table_names_by_filter_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_names_by_filter", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_names_by_filter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_alter_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_table.length === 3) {
    Q.fcall(this._handler.alter_table.bind(this._handler), args.dbname, args.tbl_name, args.new_tbl)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_alter_table_result({success: result});
        output.writeMessageBegin("alter_table", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_alter_table_result(err);
          output.writeMessageBegin("alter_table", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("alter_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_table(args.dbname, args.tbl_name, args.new_tbl, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_alter_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("alter_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("alter_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_alter_table_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_table_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_table_with_environment_context.length === 4) {
    Q.fcall(this._handler.alter_table_with_environment_context.bind(this._handler), args.dbname, args.tbl_name, args.new_tbl, args.environment_context)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_alter_table_with_environment_context_result({success: result});
        output.writeMessageBegin("alter_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_alter_table_with_environment_context_result(err);
          output.writeMessageBegin("alter_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("alter_table_with_environment_context", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_table_with_environment_context(args.dbname, args.tbl_name, args.new_tbl, args.environment_context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_alter_table_with_environment_context_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("alter_table_with_environment_context", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("alter_table_with_environment_context", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_add_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_partition.length === 1) {
    Q.fcall(this._handler.add_partition.bind(this._handler), args.new_part)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_add_partition_result({success: result});
        output.writeMessageBegin("add_partition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_add_partition_result(err);
          output.writeMessageBegin("add_partition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("add_partition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_partition(args.new_part, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_add_partition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_partition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_partition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_add_partition_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partition_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_partition_with_environment_context.length === 2) {
    Q.fcall(this._handler.add_partition_with_environment_context.bind(this._handler), args.new_part, args.environment_context)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_add_partition_with_environment_context_result({success: result});
        output.writeMessageBegin("add_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_add_partition_with_environment_context_result(err);
          output.writeMessageBegin("add_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("add_partition_with_environment_context", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_partition_with_environment_context(args.new_part, args.environment_context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_add_partition_with_environment_context_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_partition_with_environment_context", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_add_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partitions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_partitions.length === 1) {
    Q.fcall(this._handler.add_partitions.bind(this._handler), args.new_parts)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_add_partitions_result({success: result});
        output.writeMessageBegin("add_partitions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_add_partitions_result(err);
          output.writeMessageBegin("add_partitions", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("add_partitions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_partitions(args.new_parts, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_add_partitions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_partitions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_partitions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_append_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.append_partition.length === 3) {
    Q.fcall(this._handler.append_partition.bind(this._handler), args.db_name, args.tbl_name, args.part_vals)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_append_partition_result({success: result});
        output.writeMessageBegin("append_partition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_append_partition_result(err);
          output.writeMessageBegin("append_partition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("append_partition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.append_partition(args.db_name, args.tbl_name, args.part_vals, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_append_partition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("append_partition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("append_partition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_append_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.append_partition_by_name.length === 3) {
    Q.fcall(this._handler.append_partition_by_name.bind(this._handler), args.db_name, args.tbl_name, args.part_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_append_partition_by_name_result({success: result});
        output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_append_partition_by_name_result(err);
          output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.append_partition_by_name(args.db_name, args.tbl_name, args.part_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_append_partition_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_drop_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_partition.length === 4) {
    Q.fcall(this._handler.drop_partition.bind(this._handler), args.db_name, args.tbl_name, args.part_vals, args.deleteData)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_drop_partition_result({success: result});
        output.writeMessageBegin("drop_partition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_drop_partition_result(err);
          output.writeMessageBegin("drop_partition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("drop_partition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_drop_partition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("drop_partition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_partition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_drop_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_partition_by_name.length === 4) {
    Q.fcall(this._handler.drop_partition_by_name.bind(this._handler), args.db_name, args.tbl_name, args.part_name, args.deleteData)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_drop_partition_by_name_result({success: result});
        output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_drop_partition_by_name_result(err);
          output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_partition_by_name(args.db_name, args.tbl_name, args.part_name, args.deleteData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_drop_partition_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition.length === 3) {
    Q.fcall(this._handler.get_partition.bind(this._handler), args.db_name, args.tbl_name, args.part_vals)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partition_result({success: result});
        output.writeMessageBegin("get_partition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_get_partition_result(err);
          output.writeMessageBegin("get_partition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition(args.db_name, args.tbl_name, args.part_vals, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_get_partition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partition_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_with_auth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition_with_auth.length === 5) {
    Q.fcall(this._handler.get_partition_with_auth.bind(this._handler), args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partition_with_auth_result({success: result});
        output.writeMessageBegin("get_partition_with_auth", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_get_partition_with_auth_result(err);
          output.writeMessageBegin("get_partition_with_auth", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partition_with_auth", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition_with_auth(args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_get_partition_with_auth_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partition_with_auth", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partition_with_auth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition_by_name.length === 3) {
    Q.fcall(this._handler.get_partition_by_name.bind(this._handler), args.db_name, args.tbl_name, args.part_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partition_by_name_result({success: result});
        output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_get_partition_by_name_result(err);
          output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition_by_name(args.db_name, args.tbl_name, args.part_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_get_partition_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions.length === 3) {
    Q.fcall(this._handler.get_partitions.bind(this._handler), args.db_name, args.tbl_name, args.max_parts)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partitions_result({success: result});
        output.writeMessageBegin("get_partitions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_partitions_result(err);
          output.writeMessageBegin("get_partitions", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partitions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions(args.db_name, args.tbl_name, args.max_parts, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_partitions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partitions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partitions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partitions_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_with_auth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_with_auth.length === 5) {
    Q.fcall(this._handler.get_partitions_with_auth.bind(this._handler), args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partitions_with_auth_result({success: result});
        output.writeMessageBegin("get_partitions_with_auth", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_partitions_with_auth_result(err);
          output.writeMessageBegin("get_partitions_with_auth", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partitions_with_auth", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_with_auth(args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_partitions_with_auth_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partitions_with_auth", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partitions_with_auth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partition_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition_names.length === 3) {
    Q.fcall(this._handler.get_partition_names.bind(this._handler), args.db_name, args.tbl_name, args.max_parts)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partition_names_result({success: result});
        output.writeMessageBegin("get_partition_names", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_partition_names_result(err);
          output.writeMessageBegin("get_partition_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partition_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition_names(args.db_name, args.tbl_name, args.max_parts, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_partition_names_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partition_names", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partition_names", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_ps.length === 4) {
    Q.fcall(this._handler.get_partitions_ps.bind(this._handler), args.db_name, args.tbl_name, args.part_vals, args.max_parts)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partitions_ps_result({success: result});
        output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_get_partitions_ps_result(err);
          output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_get_partitions_ps_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_with_auth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_ps_with_auth.length === 6) {
    Q.fcall(this._handler.get_partitions_ps_with_auth.bind(this._handler), args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partitions_ps_with_auth_result({success: result});
        output.writeMessageBegin("get_partitions_ps_with_auth", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result(err);
          output.writeMessageBegin("get_partitions_ps_with_auth", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partitions_ps_with_auth", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_ps_with_auth(args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_partitions_ps_with_auth_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partitions_ps_with_auth", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partitions_ps_with_auth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partition_names_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_ps_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition_names_ps.length === 4) {
    Q.fcall(this._handler.get_partition_names_ps.bind(this._handler), args.db_name, args.tbl_name, args.part_vals, args.max_parts)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partition_names_ps_result({success: result});
        output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_get_partition_names_ps_result(err);
          output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition_names_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_get_partition_names_ps_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partitions_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_by_filter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_by_filter.length === 4) {
    Q.fcall(this._handler.get_partitions_by_filter.bind(this._handler), args.db_name, args.tbl_name, args.filter, args.max_parts)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partitions_by_filter_result({success: result});
        output.writeMessageBegin("get_partitions_by_filter", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_get_partitions_by_filter_result(err);
          output.writeMessageBegin("get_partitions_by_filter", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partitions_by_filter", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_by_filter(args.db_name, args.tbl_name, args.filter, args.max_parts, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_get_partitions_by_filter_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partitions_by_filter", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partitions_by_filter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partitions_by_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_by_names_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partitions_by_names.length === 3) {
    Q.fcall(this._handler.get_partitions_by_names.bind(this._handler), args.db_name, args.tbl_name, args.names)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partitions_by_names_result({success: result});
        output.writeMessageBegin("get_partitions_by_names", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_get_partitions_by_names_result(err);
          output.writeMessageBegin("get_partitions_by_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partitions_by_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partitions_by_names(args.db_name, args.tbl_name, args.names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_get_partitions_by_names_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partitions_by_names", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partitions_by_names", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_alter_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_partition.length === 3) {
    Q.fcall(this._handler.alter_partition.bind(this._handler), args.db_name, args.tbl_name, args.new_part)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_alter_partition_result({success: result});
        output.writeMessageBegin("alter_partition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_alter_partition_result(err);
          output.writeMessageBegin("alter_partition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("alter_partition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_partition(args.db_name, args.tbl_name, args.new_part, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_alter_partition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("alter_partition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("alter_partition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_alter_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partitions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_partitions.length === 3) {
    Q.fcall(this._handler.alter_partitions.bind(this._handler), args.db_name, args.tbl_name, args.new_parts)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_alter_partitions_result({success: result});
        output.writeMessageBegin("alter_partitions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_alter_partitions_result(err);
          output.writeMessageBegin("alter_partitions", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("alter_partitions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_partitions(args.db_name, args.tbl_name, args.new_parts, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_alter_partitions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("alter_partitions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("alter_partitions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_alter_partition_with_environment_context = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partition_with_environment_context_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_partition_with_environment_context.length === 4) {
    Q.fcall(this._handler.alter_partition_with_environment_context.bind(this._handler), args.db_name, args.tbl_name, args.new_part, args.environment_context)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_alter_partition_with_environment_context_result({success: result});
        output.writeMessageBegin("alter_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_alter_partition_with_environment_context_result(err);
          output.writeMessageBegin("alter_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("alter_partition_with_environment_context", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_partition_with_environment_context(args.db_name, args.tbl_name, args.new_part, args.environment_context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_alter_partition_with_environment_context_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("alter_partition_with_environment_context", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("alter_partition_with_environment_context", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_rename_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_rename_partition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rename_partition.length === 4) {
    Q.fcall(this._handler.rename_partition.bind(this._handler), args.db_name, args.tbl_name, args.part_vals, args.new_part)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_rename_partition_result({success: result});
        output.writeMessageBegin("rename_partition", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_rename_partition_result(err);
          output.writeMessageBegin("rename_partition", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rename_partition", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rename_partition(args.db_name, args.tbl_name, args.part_vals, args.new_part, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_rename_partition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rename_partition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rename_partition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_config_value = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_config_value_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_config_value.length === 2) {
    Q.fcall(this._handler.get_config_value.bind(this._handler), args.name, args.defaultValue)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_config_value_result({success: result});
        output.writeMessageBegin("get_config_value", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ConfigValSecurityException) {
          result = new ThriftHiveMetastore_get_config_value_result(err);
          output.writeMessageBegin("get_config_value", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_config_value", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_config_value(args.name, args.defaultValue, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ConfigValSecurityException) {
        result_obj = new ThriftHiveMetastore_get_config_value_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_config_value", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_config_value", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_vals = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_vals_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.partition_name_to_vals.length === 1) {
    Q.fcall(this._handler.partition_name_to_vals.bind(this._handler), args.part_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_partition_name_to_vals_result({success: result});
        output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_partition_name_to_vals_result(err);
          output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.partition_name_to_vals(args.part_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_partition_name_to_vals_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_spec = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_spec_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.partition_name_to_spec.length === 1) {
    Q.fcall(this._handler.partition_name_to_spec.bind(this._handler), args.part_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_partition_name_to_spec_result({success: result});
        output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_partition_name_to_spec_result(err);
          output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.partition_name_to_spec(args.part_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_partition_name_to_spec_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_markPartitionForEvent = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_markPartitionForEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.markPartitionForEvent.length === 4) {
    Q.fcall(this._handler.markPartitionForEvent.bind(this._handler), args.db_name, args.tbl_name, args.part_vals, args.eventType)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_markPartitionForEvent_result({success: result});
        output.writeMessageBegin("markPartitionForEvent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.UnknownDBException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownPartitionException || err instanceof ttypes.InvalidPartitionException) {
          result = new ThriftHiveMetastore_markPartitionForEvent_result(err);
          output.writeMessageBegin("markPartitionForEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("markPartitionForEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.markPartitionForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.UnknownDBException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownPartitionException || err instanceof ttypes.InvalidPartitionException) {
        result_obj = new ThriftHiveMetastore_markPartitionForEvent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("markPartitionForEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("markPartitionForEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_isPartitionMarkedForEvent = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_isPartitionMarkedForEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isPartitionMarkedForEvent.length === 4) {
    Q.fcall(this._handler.isPartitionMarkedForEvent.bind(this._handler), args.db_name, args.tbl_name, args.part_vals, args.eventType)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_isPartitionMarkedForEvent_result({success: result});
        output.writeMessageBegin("isPartitionMarkedForEvent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.UnknownDBException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownPartitionException || err instanceof ttypes.InvalidPartitionException) {
          result = new ThriftHiveMetastore_isPartitionMarkedForEvent_result(err);
          output.writeMessageBegin("isPartitionMarkedForEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isPartitionMarkedForEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isPartitionMarkedForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.UnknownDBException || err instanceof ttypes.UnknownTableException || err instanceof ttypes.UnknownPartitionException || err instanceof ttypes.InvalidPartitionException) {
        result_obj = new ThriftHiveMetastore_isPartitionMarkedForEvent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isPartitionMarkedForEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isPartitionMarkedForEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_add_index = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_index_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_index.length === 2) {
    Q.fcall(this._handler.add_index.bind(this._handler), args.new_index, args.index_table)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_add_index_result({success: result});
        output.writeMessageBegin("add_index", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_add_index_result(err);
          output.writeMessageBegin("add_index", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("add_index", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add_index(args.new_index, args.index_table, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.AlreadyExistsException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_add_index_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_index", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_index", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_alter_index = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_index_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alter_index.length === 4) {
    Q.fcall(this._handler.alter_index.bind(this._handler), args.dbname, args.base_tbl_name, args.idx_name, args.new_idx)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_alter_index_result({success: result});
        output.writeMessageBegin("alter_index", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_alter_index_result(err);
          output.writeMessageBegin("alter_index", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("alter_index", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alter_index(args.dbname, args.base_tbl_name, args.idx_name, args.new_idx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidOperationException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_alter_index_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("alter_index", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("alter_index", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_drop_index_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_index_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_index_by_name.length === 4) {
    Q.fcall(this._handler.drop_index_by_name.bind(this._handler), args.db_name, args.tbl_name, args.index_name, args.deleteData)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_drop_index_by_name_result({success: result});
        output.writeMessageBegin("drop_index_by_name", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_drop_index_by_name_result(err);
          output.writeMessageBegin("drop_index_by_name", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("drop_index_by_name", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_index_by_name(args.db_name, args.tbl_name, args.index_name, args.deleteData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_drop_index_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("drop_index_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_index_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_index_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_index_by_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_index_by_name.length === 3) {
    Q.fcall(this._handler.get_index_by_name.bind(this._handler), args.db_name, args.tbl_name, args.index_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_index_by_name_result({success: result});
        output.writeMessageBegin("get_index_by_name", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
          result = new ThriftHiveMetastore_get_index_by_name_result(err);
          output.writeMessageBegin("get_index_by_name", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_index_by_name", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_index_by_name(args.db_name, args.tbl_name, args.index_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException || err instanceof ttypes.NoSuchObjectException) {
        result_obj = new ThriftHiveMetastore_get_index_by_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_index_by_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_index_by_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_indexes = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_indexes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_indexes.length === 3) {
    Q.fcall(this._handler.get_indexes.bind(this._handler), args.db_name, args.tbl_name, args.max_indexes)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_indexes_result({success: result});
        output.writeMessageBegin("get_indexes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_indexes_result(err);
          output.writeMessageBegin("get_indexes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_indexes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_indexes(args.db_name, args.tbl_name, args.max_indexes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_indexes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_indexes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_indexes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_index_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_index_names_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_index_names.length === 3) {
    Q.fcall(this._handler.get_index_names.bind(this._handler), args.db_name, args.tbl_name, args.max_indexes)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_index_names_result({success: result});
        output.writeMessageBegin("get_index_names", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_index_names_result(err);
          output.writeMessageBegin("get_index_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_index_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_index_names(args.db_name, args.tbl_name, args.max_indexes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_index_names_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_index_names", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_index_names", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_update_table_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_update_table_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_table_column_statistics.length === 1) {
    Q.fcall(this._handler.update_table_column_statistics.bind(this._handler), args.stats_obj)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_update_table_column_statistics_result({success: result});
        output.writeMessageBegin("update_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException) {
          result = new ThriftHiveMetastore_update_table_column_statistics_result(err);
          output.writeMessageBegin("update_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("update_table_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.update_table_column_statistics(args.stats_obj, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException) {
        result_obj = new ThriftHiveMetastore_update_table_column_statistics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_table_column_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_table_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_update_partition_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_update_partition_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_partition_column_statistics.length === 1) {
    Q.fcall(this._handler.update_partition_column_statistics.bind(this._handler), args.stats_obj)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_update_partition_column_statistics_result({success: result});
        output.writeMessageBegin("update_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException) {
          result = new ThriftHiveMetastore_update_partition_column_statistics_result(err);
          output.writeMessageBegin("update_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("update_partition_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.update_partition_column_statistics(args.stats_obj, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException) {
        result_obj = new ThriftHiveMetastore_update_partition_column_statistics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_partition_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_table_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_column_statistics.length === 3) {
    Q.fcall(this._handler.get_table_column_statistics.bind(this._handler), args.db_name, args.tbl_name, args.col_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_table_column_statistics_result({success: result});
        output.writeMessageBegin("get_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException || err instanceof ttypes.InvalidObjectException) {
          result = new ThriftHiveMetastore_get_table_column_statistics_result(err);
          output.writeMessageBegin("get_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_column_statistics(args.db_name, args.tbl_name, args.col_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException || err instanceof ttypes.InvalidObjectException) {
        result_obj = new ThriftHiveMetastore_get_table_column_statistics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_column_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_partition_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_partition_column_statistics.length === 4) {
    Q.fcall(this._handler.get_partition_column_statistics.bind(this._handler), args.db_name, args.tbl_name, args.part_name, args.col_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_partition_column_statistics_result({success: result});
        output.writeMessageBegin("get_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException || err instanceof ttypes.InvalidObjectException) {
          result = new ThriftHiveMetastore_get_partition_column_statistics_result(err);
          output.writeMessageBegin("get_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_partition_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_partition_column_statistics(args.db_name, args.tbl_name, args.part_name, args.col_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidInputException || err instanceof ttypes.InvalidObjectException) {
        result_obj = new ThriftHiveMetastore_get_partition_column_statistics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_partition_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_delete_partition_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_delete_partition_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_partition_column_statistics.length === 4) {
    Q.fcall(this._handler.delete_partition_column_statistics.bind(this._handler), args.db_name, args.tbl_name, args.part_name, args.col_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_delete_partition_column_statistics_result({success: result});
        output.writeMessageBegin("delete_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
          result = new ThriftHiveMetastore_delete_partition_column_statistics_result(err);
          output.writeMessageBegin("delete_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_partition_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete_partition_column_statistics(args.db_name, args.tbl_name, args.part_name, args.col_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
        result_obj = new ThriftHiveMetastore_delete_partition_column_statistics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delete_partition_column_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_partition_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_delete_table_column_statistics = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_delete_table_column_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_table_column_statistics.length === 3) {
    Q.fcall(this._handler.delete_table_column_statistics.bind(this._handler), args.db_name, args.tbl_name, args.col_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_delete_table_column_statistics_result({success: result});
        output.writeMessageBegin("delete_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
          result = new ThriftHiveMetastore_delete_table_column_statistics_result(err);
          output.writeMessageBegin("delete_table_column_statistics", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delete_table_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delete_table_column_statistics(args.db_name, args.tbl_name, args.col_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoSuchObjectException || err instanceof ttypes.MetaException || err instanceof ttypes.InvalidObjectException || err instanceof ttypes.InvalidInputException) {
        result_obj = new ThriftHiveMetastore_delete_table_column_statistics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delete_table_column_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_table_column_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_create_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_role.length === 1) {
    Q.fcall(this._handler.create_role.bind(this._handler), args.role)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_create_role_result({success: result});
        output.writeMessageBegin("create_role", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_create_role_result(err);
          output.writeMessageBegin("create_role", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_role", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_role(args.role, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_create_role_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_role", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_role", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_drop_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_role.length === 1) {
    Q.fcall(this._handler.drop_role.bind(this._handler), args.role_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_drop_role_result({success: result});
        output.writeMessageBegin("drop_role", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_drop_role_result(err);
          output.writeMessageBegin("drop_role", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("drop_role", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_role(args.role_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_drop_role_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("drop_role", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_role", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_role_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_role_names_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_role_names.length === 0) {
    Q.fcall(this._handler.get_role_names.bind(this._handler))
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_role_names_result({success: result});
        output.writeMessageBegin("get_role_names", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_role_names_result(err);
          output.writeMessageBegin("get_role_names", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_role_names", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_role_names(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_role_names_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_role_names", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_role_names", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_grant_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.grant_role.length === 6) {
    Q.fcall(this._handler.grant_role.bind(this._handler), args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_grant_role_result({success: result});
        output.writeMessageBegin("grant_role", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_grant_role_result(err);
          output.writeMessageBegin("grant_role", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("grant_role", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.grant_role(args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_grant_role_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("grant_role", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("grant_role", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_revoke_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_revoke_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.revoke_role.length === 3) {
    Q.fcall(this._handler.revoke_role.bind(this._handler), args.role_name, args.principal_name, args.principal_type)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_revoke_role_result({success: result});
        output.writeMessageBegin("revoke_role", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_revoke_role_result(err);
          output.writeMessageBegin("revoke_role", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revoke_role", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.revoke_role(args.role_name, args.principal_name, args.principal_type, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_revoke_role_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("revoke_role", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("revoke_role", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_list_roles = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_list_roles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.list_roles.length === 2) {
    Q.fcall(this._handler.list_roles.bind(this._handler), args.principal_name, args.principal_type)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_list_roles_result({success: result});
        output.writeMessageBegin("list_roles", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_list_roles_result(err);
          output.writeMessageBegin("list_roles", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("list_roles", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.list_roles(args.principal_name, args.principal_type, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_list_roles_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("list_roles", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("list_roles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_privilege_set = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_privilege_set_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_privilege_set.length === 3) {
    Q.fcall(this._handler.get_privilege_set.bind(this._handler), args.hiveObject, args.user_name, args.group_names)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_privilege_set_result({success: result});
        output.writeMessageBegin("get_privilege_set", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_privilege_set_result(err);
          output.writeMessageBegin("get_privilege_set", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_privilege_set", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_privilege_set(args.hiveObject, args.user_name, args.group_names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_privilege_set_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_privilege_set", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_privilege_set", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_list_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_list_privileges_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.list_privileges.length === 3) {
    Q.fcall(this._handler.list_privileges.bind(this._handler), args.principal_name, args.principal_type, args.hiveObject)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_list_privileges_result({success: result});
        output.writeMessageBegin("list_privileges", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_list_privileges_result(err);
          output.writeMessageBegin("list_privileges", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("list_privileges", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.list_privileges(args.principal_name, args.principal_type, args.hiveObject, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_list_privileges_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("list_privileges", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("list_privileges", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_grant_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_privileges_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.grant_privileges.length === 1) {
    Q.fcall(this._handler.grant_privileges.bind(this._handler), args.privileges)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_grant_privileges_result({success: result});
        output.writeMessageBegin("grant_privileges", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_grant_privileges_result(err);
          output.writeMessageBegin("grant_privileges", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("grant_privileges", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.grant_privileges(args.privileges, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_grant_privileges_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("grant_privileges", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("grant_privileges", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_revoke_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_revoke_privileges_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.revoke_privileges.length === 1) {
    Q.fcall(this._handler.revoke_privileges.bind(this._handler), args.privileges)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_revoke_privileges_result({success: result});
        output.writeMessageBegin("revoke_privileges", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_revoke_privileges_result(err);
          output.writeMessageBegin("revoke_privileges", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revoke_privileges", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.revoke_privileges(args.privileges, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_revoke_privileges_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("revoke_privileges", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("revoke_privileges", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_set_ugi = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_set_ugi_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_ugi.length === 2) {
    Q.fcall(this._handler.set_ugi.bind(this._handler), args.user_name, args.group_names)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_set_ugi_result({success: result});
        output.writeMessageBegin("set_ugi", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_set_ugi_result(err);
          output.writeMessageBegin("set_ugi", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_ugi", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_ugi(args.user_name, args.group_names, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_set_ugi_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_ugi", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_ugi", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_get_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_delegation_token_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_delegation_token.length === 2) {
    Q.fcall(this._handler.get_delegation_token.bind(this._handler), args.token_owner, args.renewer_kerberos_principal_name)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_get_delegation_token_result({success: result});
        output.writeMessageBegin("get_delegation_token", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_get_delegation_token_result(err);
          output.writeMessageBegin("get_delegation_token", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_delegation_token", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_delegation_token(args.token_owner, args.renewer_kerberos_principal_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_get_delegation_token_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_delegation_token", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_delegation_token", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_renew_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_renew_delegation_token_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.renew_delegation_token.length === 1) {
    Q.fcall(this._handler.renew_delegation_token.bind(this._handler), args.token_str_form)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_renew_delegation_token_result({success: result});
        output.writeMessageBegin("renew_delegation_token", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_renew_delegation_token_result(err);
          output.writeMessageBegin("renew_delegation_token", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("renew_delegation_token", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.renew_delegation_token(args.token_str_form, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_renew_delegation_token_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("renew_delegation_token", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("renew_delegation_token", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftHiveMetastoreProcessor.prototype.process_cancel_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_cancel_delegation_token_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancel_delegation_token.length === 1) {
    Q.fcall(this._handler.cancel_delegation_token.bind(this._handler), args.token_str_form)
      .then(function(result) {
        var result_obj = new ThriftHiveMetastore_cancel_delegation_token_result({success: result});
        output.writeMessageBegin("cancel_delegation_token", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.MetaException) {
          result = new ThriftHiveMetastore_cancel_delegation_token_result(err);
          output.writeMessageBegin("cancel_delegation_token", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cancel_delegation_token", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancel_delegation_token(args.token_str_form, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.MetaException) {
        result_obj = new ThriftHiveMetastore_cancel_delegation_token_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cancel_delegation_token", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_delegation_token", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
